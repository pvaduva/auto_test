#!/usr/bin/env bash
# make this auto-runnable! 
# Little bootstrap bash script to run kick start expect-lite script

#
# Change the environment variables to allow auto login to remote machine
#		e.g. vbox_install.elt -r <remote machine>
#
export EL_CONNECT_METHOD=ssh_key


# re-run the script as an expect-lite script
/usr/bin/env expect-lite c=$0 $*

# end the bash script, and return expect-lite pass/fail
exit $?



# How to use this expect-lite file, Lines that begin with:
#	'>' send to remote host, implies "wait for prompt"
#	'<' _MUST_ be received from the remote host, or this config script will fail
#	# are comment lines, and have no effect
#	; are printable (in stdout) comments, and have no other effect
#	@ change the expect timeout value
#	! Embedded Expect commands
# For more info see: expect-lite.html


;;;

Install VirtualBox on Linux or Windows Host
.	MUST  run script from Linux host or Linux VM
.
.	Supports the following topologies: 2x2 (default), 2only, 1x1
.		e.g. topology=1x1

.	Common options:
.		pull_new_image=yes		(default no)
.		topology=2x1x1			(default 2x2)
.		topology=1x1			(1 controller & 1 compute)
.		rel2=no				(default yes)
.		con=M_O_I			(default MI_O)   - CONTROLLER NETWORK CONSOIDATION
.		com=M_I_D			(default MI_D)   - COMPUTE NETWORK CONSOLIDATION
.		str=M_I	 			(default MI)     - STORAGE NETWORK CONSOLIDATION
.		https=yes                       (default no)

.	e.g. for linux
.	./vbox_install_R4.elt pull_new_image=yes topology=2only rel2=no
	e.g. for linux with Network Conolidation
	.	e.g. for linux
.	./vbox_install_R4.elt pull_new_image=yes topology=2x2x2 rel2=yes con=MI_O str=MI com=MI_D

.	e.g. for windows
.	./vbox_install_R4.elt -r <windows machine IP> pull_new_image=yes topology=2x1 con=MI_O str=MI com=MI_D
.	e.g for linux
	~/wassp-repos/testcases/cgcs/utils$ ./vbox_install_R4.elt pull_new_image=yes topology=1x1 rel2=yes con=MI_O str=MI com=MI_D load=GA2 patch=yes https=no
.
. 	Supported topology
. 		2only 	- controller-0 controller-1
.		1x1  	- controller-0 compute-0
. 		2x1	- controller-0 controller-1 compute-0
.		2x2	- controller-0 controller-1 compute-0 compute-1
.		2x1x1	- controller-0 controller-1 compute-0 storage-0
.		2x2x2 	- controller-0 controller-1 compute-0 compute-1 storage-0 storage-1
.
. 	Network Consolidation Abbreviations:
.
.		_ - Separate
.		M - Management Network
.		O - OAM Network
.		D - Data Network
.		I - Infrastructure Network
.		T - Tagged/VLAN
.		U - Untagged

.	Network Consolidation Options for controller (con): 

.		 M_O   - Separate Management & OAM Interface (Only supported for 2only)
.                M_O_I - Separate Management, OAM & Infrastructure network
.	         M_O_TI- Seperate Management, OAM network & Tagged Infrastruture 
.		 MOI   - Combined Management, OAM, Infrastructure network
.	         MO_I  - Combined Management, OAM network & separate Infrastruture Untagged
.	         MO_TI  - Combined Management, OAM network & separate Infrastruture tagged
.		 MI_O - Combined Management, Infrastructure & separate untagged OAM network (DEFAULT)
.		 MI_TO - Combined Management, Infrastructure & separate Tagged OAM network
.		 M_TOTI- Separate Management & combined Tagged OAM & tagged Infrastrucute network
.		 M_UOTI- Separate Management & combined untagged OAM & tagged Infrastrucute network
.		 M_TOUI- Separate Management & combined tagged OAM & untagged Infrastrucute network

.	Network Consolidation Options for Storage (str): 
.		 MI    - Combined Management, Infrastructure network (Default)
.		 TMI   - Combined Tagged Management, Infrastructure network
.		 M_I   - Separate Management & Infrastructure network
.	         M_TI  - Separate Management & Tagged Infrastructure network

.	Network Consolidation Options for Compute (com): 
.		 MI_D   - Combined Management, Infrastructure & Separate Data network (Default)
.		 TMI_D  - Combined Management, Tagged Infrastructure & Separate Data network
.	         M_I_D  - Seperate Management, Infrastructure & Data network
.	         M_TI_D - Seperate Management, Data & Tagged Infrastructure network

. 	Assumptions:
.		ssh keys on CGTS1 server (to pull latest image)
.			ssh-copy-id $USER@yow-cgts3-lx.wrs.com
.		Node VMs named 'controller-0' 'controller-1' 'compute-0' 'compute-1'
.			Nodes have serial port configured (as per wiki) e.g. /tmp/controller0_serial
.		Wipedisk has been run on nodes prior to install - or enable with wipedisk=yes
.		Linux or Linux VM has ssh keys 
.			ssh-keygen -t rsa

. 	Additional Assumptions for Windows support (see script for details):
.		MobaXterm Installed, socat installed
.		Named Pipe TCP Proxy Utility (NPTP) installed
.			serial console configured for port 7000
.		Windows Firewall configured to allow inbound connections (for socat proxy)
.		sshd running on Windows (via MobaXterm/cygwin) /bin/sshd
.		ssh keys on linux machine (for auto login to windows machine)
.			ssh-copy-id $USER@<windows machine>

.	Limitations:
.		Vbox Snapshots are not supported - must wipedisk prior to running script when using snapshots
.		Data Consolidation is not supported 

Version 1.0 by Craig miller
Version 2.0 by senthilkumar
;;;

#
#	Windows support (high level):
#		Requires cygwin (included with MobaXterm)
#			Enable sshd
#		Use windows method for serial console e.g. \\.\pipe\controller-0
#			Named Pipe TCP Proxy Utility (NPTP)
#		Open Windows Firewall to allow socat proxy
#			Windows Firewall -> Advanced -> Public Profile Properties -> Public Profile -> Inbound Conn. 'Allow'

#	Windows install (details: only do once):
#		MobaXterm
#			apt-get install socat
#			Edit /etc/profile to FANCYPS1=rxvt
#		VirtualBox
#			/drives/c/Program\ Files/Oracle/VirtualBox/VBoxManage.exe
#			/drives/c/Program\ Files/Oracle/VirtualBox/VBoxManage.exe list
#		Named Pipe TCP Proxy - shvechkov@yahoo.com	http://shvechkov.tripod.com/nptp.html
#			\\.\pipe\controller0_serial	-> 7000
#		Getting /bin/sshd to run
#			copy sshd_config to /etc
#				wget http://yow-smukunda-lx/files/Win/sshd_config
#			add user sshd to /etc/passwd
#				echo "sshd::99:99:/bin/false" >> /etc/passwd
#			mkdir /etc/ssh
#			generate keys - ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key
#			mkdir /var/empty
#			/bin/sshd
#		Set up expect-lite env to auto login to windows machine
#			export WIN_MACHINE=<win_machine>
#			ssh-copy-id $USER@$WIN_MACHINE
#

#	Windows install (details: the second or successive VBox installs):
#		Start apps:
#			MobaXterm
#				Start sshd: /bin/sshd
#			Named Pipe TCP Proxy Utility (NPTP) - console mappings should be OK
#		Check that Windows Firewall still allows inbound connections
#		Start vbox_install.elt script from Linux VM
#			e.g. ./vbox_install.elt -r <windows_machine_IP|name>
#

#
#	Notes:
#		Wiping Vbox HD outside of the VM (using dd)
#			VDIFILE="compute-1.vdi"
#			printf '\xa1\xa1\xa1\xa1\xa1\xa1\xa1\xa1' | dd conv=notrunc of=$VDIFILE bs=1 seek=$((0x00200000))
#


#EXP_INFO
*NOFAIL

# assign fail script for debugging
#*~fail_time.inc
$load=GA2
$load=none
# TiS version  14
$source_image=yow-cgts3-lx.wrs.com:/localdisk/loadbuild/jenkins/CGCS_1.0_Unified_Daily_Build/latest_bootimage.iso
# TiS version  15
$source_image=yow-cgts3-lx.wrs.com:/localdisk/loadbuild/jenkins/CGCS_2.0_Unified_Daily_Build/latest_bootimage.iso
# TiS version  16
$source_image=yow-cgts3-lx.wrs.com:/localdisk/loadbuild/jenkins/CGCS_3.0_Unified_Daily_Build/latest_bootimage.iso
# Centos Version
$source_image=yow-cgts3-lx.wrs.com:/localdisk/loadbuild/jenkins/CGCS_3.0_Centos_Build/latest_bootimage.iso
# Centos Version
$source_image=yow-cgts4-lx.wrs.com:/localdisk/loadbuild/jenkins/CGCS_3.0_Centos_Build/latest_bootimage.iso
# GA3
$source_image=yow-cgts4-lx.wrs.com:/localdisk/loadbuild/jenkins/TS_16.10_Host/latest_bootimage.iso
?if $load == GA2 ?[
	$source_image=yow-cgts3-lx.wrs.com:/localdisk/loadbuild/jenkins/TS_15.12_Host/latest_bootimage.iso
]
$source_image=yow-cgts4-lx.wrs.com:/localdisk/loadbuild/jenkins/CGCS_4.0_Centos_Build/latest_bootimage.iso
$source_image=yow-cgts4-lx.wrs.com:/localdisk/loadbuild/jenkins/CGCS_5.0_Host/latest_bootimage.iso

$boot_image=/home/$USER/VBox/latest_bootimage.iso
$boot_dir=$boot_image
=$boot_dir;/.+(\w+)/\w+.iso;\1;

# parse for boot image directory
$boot_image_dir=$boot_image
=$boot_image_dir;(/.+/)\w.+;\1;

$boot_dir=$boot_image_dir
=$boot_dir;/.+(/\w+/);\1;
>

# default user and password
$user=wrsroot
$pass=Li69nux*

$admin_password=admin

#controller IP
$IP=10.10.10.3

### install options
$pull_new_image=no
$wipe_disk=yes
#config controller release2 additional questions
#$rel2=yes @@@@@@ Changed the code by default to rel2 behaviour
$rel3=yes

$install_tenant_files=yes
# Maximum wait loop count
$max=500


# port for socat proxy
$proxy_port=8080
$proxy_port=8088

# security options
$https=no

## Topologies supported
$topology=2only
$topology=2x2
$topology=1x1

## Controller Consolidation Combinations
# DEFAULT Separate Management & OAM interface
$con=MI_O 

# Storage Consolidation Combinations
# DEFAULT Only Management interface
$str=MI  

# Compute Consolidation Combinations
# DEFAULT Only Management interface
$com=MI_D  

# Default ipv6=no
$ipv6=no
?if ipv6 == yes ?[
	## Controller Consolidation Combinations
	$con=TMI_O
	# Storage Consolidation Combinations
	$str=TMI
	# Compute Consolidation Combinations
	$com=TMI_D  
]

# Network consolidation Variables extracted in to readable Variables
$controller_consolidation=$con
$compute_consolidation=$com
$storage_consolidation=$str 
$infra_name=infra0

# Default session
$connection=SSH

$heat_tarball=heat.tgz


### vm start options
$vbox_opts= --type headless
$vbox_opts=

## Windows Vars
$vboxmanage_win=/drives/c/Program\ Files/Oracle/VirtualBox/VBoxManage.exe
$vboxmanage_linux=vboxmanage
$console_linux=socat UNIX-CONNECT:$serial_pipe - 
$console_win=nc localhost 7000
$boot_image_win=/drives/c/Users/$USER/VBox/latest_bootimage.iso

## Patch
$patch=no

## sdn
$sdn=no

>date +%F_%T#
+$DATE=\n(.+)#
>

## LOG installs
*LOG $DATE-$arg0.log


#create topology node list

$node_list=
?if $topology == 2only? [
	$node_list=controller-1
	$storage_type=lvm
]

?if $topology == 2x2? [
	$node_list=controller-1 compute-0 compute-1
	$compute_list=compute-0 compute-1
	$storage_type=lvm
]


?if $topology == 2x1? [
	$node_list=controller-1 compute-0 
	$compute_list=compute-0 
	$storage_type=lvm
]

?if $topology == 1x1? [
	$node_list=compute-0
	$compute_list=compute-0 
	$storage_type=lvm
]

?if $topology == 1x3? [
	$node_list=compute-0 compute-1 compute-2
	$compute_list=compute-0 compute-1 compute-2 
	$storage_type=lvm
]

?if $topology == 1x2? [
	$node_list=compute-0 compute-1 
	$compute_list=compute-0 compute-1  
	$storage_type=lvm
]

?if $topology == 2x2x1? [ 
	$node_list=controller-1 storage-0 storage-1 compute-0 
	$compute_list=compute-0 compute-1
	$storage_list=storage-0 
	$storage_type=ceph
]

?if $topology == 2x2x2? [ 
	$node_list=controller-1 storage-0 storage-1 compute-0 compute-1 
	$compute_list=compute-0 compute-1
	$storage_list=storage-0 storage-1
	$storage_type=ceph
]

?if $topology == 1x2x2? [ 
	$node_list=storage-0 storage-1 compute-0 compute-1 
	$compute_list=compute-0 compute-1
	$storage_list=storage-0 storage-1
	$storage_type=ceph
]

?if $topology == 2x1x1? [ 
	$node_list=controller-1 storage-0 compute-0 
	$compute_list=compute-0 
	$storage_list=storage-0 
	$storage_type=ceph
]

# remove controller-0 from node_list
=$node_list - controller-0

?if $load == GA2 ?[
	$eth0=eth0
	$eth1=eth1
	$eth2=eth3
]

# native Interface
?if $rel3 == yes ?[
	$eth0=enp0s3
	$eth1=enp0s8
	$eth2=enp0s9
	#eth3 = enp0s
]
### Config Controller variables

# Seperate Management & OAM Interface

?if $controller_consolidation == M_O ? [
	$pxe_network=n
	$configure_infrastructure_interface=N
        $management_interface=$eth1
	$management_interface_MTU=1500
	$infrastructure_interface_MTU=N/A
	$OAM_interface_MTU=1500
	$infrastructure_interface_link_aggregation=N/A
	$infrastructure_interface=N/A
	$controller_infra_interface=N/A
	$configure_infrastructure_VLAN=N/A
	$infrastructure_VLAN_ID=N/A
	$infrastructure_subnet=N/A
	$OAM_interface_link_aggregation=N
	$OAM_interface=$eth0
	$configure_OAM_VLAN=N
	$OAM_VLAN_ID=N/A
	$connection=SSH
]

# Seperate Management Infra & OAM Interface

?if $controller_consolidation == M_O_I ? [
	$pxe_network=n
        $configure_infrastructure_interface=Y
        $management_interface=$eth1
        $infrastructure_interface_link_aggregation=N
        $infrastructure_interface=$eth2
	$controller_infra_interface=$eth2
        $configure_infrastructure_VLAN=N
        $infrastructure_VLAN_ID=N/A
	$management_interface_MTU=1500
	$infrastructure_interface_MTU=1500
	$OAM_interface_MTU=1500
        $infrastructure_subnet=192.168.205.0/24
        $OAM_interface_link_aggregation=N
        $OAM_interface=$eth0
        $configure_OAM_VLAN=N
        $OAM_VLAN_ID=N/A
	$connection=SSH
]


# Seperate Management,OAM Interface & Tagged Infra on its own interface

?if $controller_consolidation == M_O_TI ? [
	$pxe_network=n
        $configure_infrastructure_interface=Y
        $management_interface=$eth1
        $infrastructure_interface_link_aggregation=N
        $infrastructure_interface=$eth2
	$controller_infra_interface=$eth2
        $configure_infrastructure_VLAN=Y
        $infrastructure_VLAN_ID=21
	$management_interface_MTU=1500
	$infrastructure_interface_MTU=9216
	$OAM_interface_MTU=1500
        $infrastructure_subnet=192.168.205.0/24
        $OAM_interface_link_aggregation=N
        $OAM_interface=$eth0
        $configure_OAM_VLAN=N
        $OAM_VLAN_ID=N/A
	$connection=SSH
]

# Combined Management, OAM, Infrastructure Interface

?if $controller_consolidation == MOI ? [
	$pxe_network=n
	$configure_infrastructure_interface=Y
        $management_interface=$eth1
	$infrastructure_interface_link_aggregation=N
	$infrastructure_interface=$eth1
	$controller_infra_interface=mgmt0
	$configure_infrastructure_VLAN=Y
	$infrastructure_VLAN_ID=21
	$management_interface_MTU=1500
	$infrastructure_interface_MTU=1500
	$OAM_interface_MTU=1500
	$infrastructure_subnet=192.168.205.0/24
	$OAM_interface_link_aggregation=N
	$OAM_interface=$eth1
	$configure_OAM_VLAN=Y
	$OAM_VLAN_ID=22
	$connection=serial
]

# Combined Management, OAM, Infrastructure Interface

?if $controller_consolidation == TMOI ? [
	$pxe_network=y
	$management_interface=$eth1
	$management_VLAN_ID=23
	$configure_infrastructure_interface=Y
	$infrastructure_interface_link_aggregation=N
	$infrastructure_interface=$eth1
	$controller_infra_interface=mgmt0
	$configure_infrastructure_VLAN=Y
	$infrastructure_VLAN_ID=21
	$management_interface_MTU=1500
	$infrastructure_interface_MTU=1500
	$OAM_interface_MTU=1500
	$infrastructure_subnet=192.168.205.0/24
	$OAM_interface_link_aggregation=N
	$OAM_interface=$eth1
	$configure_OAM_VLAN=Y
	$OAM_VLAN_ID=22
	$connection=serial
]

# Combined Management, Infrastructure Interface & Seperate OAM

?if $controller_consolidation == TMI_O ? [
	$pxe_network=y
	$management_interface=$eth1
	$management_VLAN_ID=23
	$configure_infrastructure_interface=Y
	$infrastructure_interface_link_aggregation=N
	$infrastructure_interface=$eth1
	$controller_infra_interface=pxeboot0
	$configure_infrastructure_VLAN=Y
	$infrastructure_VLAN_ID=21
	$management_interface_MTU=1500
	$infrastructure_interface_MTU=1500
	$OAM_interface_MTU=1500
        $infrastructure_subnet=192.168.205.0/24
        $OAM_interface_link_aggregation=N
        $OAM_interface=$eth0
        $configure_OAM_VLAN=N
        $OAM_VLAN_ID=N/A
	$connection=serial
]

#Combined Management, OAM and seperate Infrastructure Interface

?if $controller_consolidation == MO_I ? [
	$pxe_network=n
        $configure_infrastructure_interface=Y
        $infrastructure_interface_link_aggregation=N
        $management_interface=$eth1
        $infrastructure_interface=$eth2
	$controller_infra_interface=$eth2
        $configure_infrastructure_VLAN=N
        $infrastructure_VLAN_ID=N/A
	$management_interface_MTU=1500
	$infrastructure_interface_MTU=1500
	$OAM_interface_MTU=1500
        $infrastructure_subnet=192.168.205.0/24
        $OAM_interface_link_aggregation=N
        $OAM_interface=$eth1
        $configure_OAM_VLAN=Y
        $OAM_VLAN_ID=22
	$connection=serial
]

# Combined Management, OAM and seperate Tagged Infrastructure Interface

?if $controller_consolidation == MO_TI ? [
	$pxe_network=n
        $configure_infrastructure_interface=Y
        $management_interface=$eth1
        $infrastructure_interface_link_aggregation=N
        $infrastructure_interface=$eth2
	$controller_infra_interface=$eth2
        $configure_infrastructure_VLAN=Y
        $infrastructure_VLAN_ID=21
	$management_interface_MTU=1500
	$infrastructure_interface_MTU=1500
	$OAM_interface_MTU=1500
        $infrastructure_subnet=192.168.205.0/24
        $OAM_interface_link_aggregation=N
        $OAM_interface=$eth1
        $configure_OAM_VLAN=Y
        $OAM_VLAN_ID=22
	$connection=serial
]

# Combined Management, Infrastructure Interface and seperate OAM

?if $controller_consolidation == MI_O ? [
	$pxe_network=n
        $configure_infrastructure_interface=Y
        $management_interface=$eth1
        $infrastructure_interface_link_aggregation=N
        $infrastructure_interface=$eth1
	$controller_infra_interface=mgmt0
        $configure_infrastructure_VLAN=Y
        $infrastructure_VLAN_ID=21
	$management_interface_MTU=1500
	$infrastructure_interface_MTU=1500
	$OAM_interface_MTU=1500
        $infrastructure_subnet=192.168.205.0/24
        $OAM_interface_link_aggregation=N
        $OAM_interface=$eth0
        $configure_OAM_VLAN=N
        $OAM_VLAN_ID=N/A
	$connection=SSH
]

# Combined Management, Infrastructure Interface and seperate Tagged OAM

?if $controller_consolidation == MI_TO ? [
	$pxe_network=n
        $configure_infrastructure_interface=Y
        $management_interface=$eth1
        $infrastructure_interface_link_aggregation=N
        $infrastructure_interface=$eth1
	$controller_infra_interface=mgmt0
        $configure_infrastructure_VLAN=Y
        $infrastructure_VLAN_ID=21
	$management_interface_MTU=1500
	$infrastructure_interface_MTU=1500
	$OAM_interface_MTU=1500
        $infrastructure_subnet=192.168.205.0/24
        $OAM_interface_link_aggregation=N
        $OAM_interface=$eth0
        $configure_OAM_VLAN=Y
        $OAM_VLAN_ID=22
	$connection=serial
]

# separate Management & Combined Tagged OAM, Tagged Infrastructure Interface

?if $controller_consolidation == M_TOTI ? [
	$pxe_network=n
        $configure_infrastructure_interface=Y
        $management_interface=$eth1
        $infrastructure_interface_link_aggregation=N
        $infrastructure_interface=$eth2
	$controller_infra_interface=$eth2
        $configure_infrastructure_VLAN=Y
        $infrastructure_VLAN_ID=21
	$management_interface_MTU=1500
	$infrastructure_interface_MTU=1500
	$OAM_interface_MTU=1500
        $infrastructure_subnet=192.168.205.0/24
        $OAM_interface_link_aggregation=N
        $OAM_interface=$eth2
        $configure_OAM_VLAN=Y
        $OAM_VLAN_ID=22
	$connection=serial
]

# separate Management & Combined Untagged OAM, Tagged Infrastructure Interface

?if $controller_consolidation == M_UOTI ? [
	$pxe_network=n
        $configure_infrastructure_interface=Y
        $management_interface=$eth1
        $infrastructure_interface_link_aggregation=N
        $infrastructure_interface=$eth0
	$controller_infra_interface=oam0
        $configure_infrastructure_VLAN=Y
        $infrastructure_VLAN_ID=21
	$management_interface_MTU=9000
	$infrastructure_interface_MTU=1500
	$OAM_interface_MTU=1500
        $infrastructure_subnet=192.168.205.0/24
        $OAM_interface_link_aggregation=N
        $OAM_interface=$eth0
        $configure_OAM_VLAN=N
        $OAM_VLAN_ID=N/A
	$connection=serial
]

# separate Management & Combined Tagged OAM,Untagged Infrastructure Interface

?if $controller_consolidation == M_TOUI ? [
	$pxe_network=n
        $configure_infrastructure_interface=Y
        $management_interface=$eth1
        $infrastructure_interface_link_aggregation=N
        $infrastructure_interface=$eth2
	$controller_infra_interface=$eth2
        $configure_infrastructure_VLAN=N
        $infrastructure_VLAN_ID=N/A
	$management_interface_MTU=9000
	$infrastructure_interface_MTU=9000
	$OAM_interface_MTU=1500
        $infrastructure_subnet=192.168.205.0/24
        $OAM_interface_link_aggregation=N
        $OAM_interface=$eth2
        $configure_OAM_VLAN=Y
        $OAM_VLAN_ID=22
	$connection=serial
]

### Storage Consolidation variables for infrastructure interface

# Combined Management & Infrastructure
?if $storage_consolidation == MI ? [
	$storage_infra_interface=mgmt0
]

# Combined Tagged Management & Infrastructure
?if $storage_consolidation == TMI ? [
	$storage_infra_interface=pxeboot0
]

# Seperate Management & Infrastructure

?if $storage_consolidation == M_I ? [
	$storage_infra_interface=$eth2
]

# Seperate Management & Tagged Infrastructure

?if $storage_consolidation == M_TI ? [
	$storage_infra_interface=$eth2
]

### Compute Consolidation variables for infrastructure interface

?if $compute_consolidation == MI_D ? [
	$compute_infra_interface=mgmt0
]
?if $compute_consolidation == TMI_D ? [
	$compute_infra_interface=pxeboot0
]


?if $compute_consolidation == M_I_D ? [
	$compute_infra_interface=$eth0
]

?if $compute_consolidation == M_TI_D ? [
	$compute_infra_interface=$eth0
]



#subnet adddresssing

$management_subnet=192.168.204.0/24
$infrastructure_subnet=192.168.205.0/24
$oam_subnet=10.10.10.0/24

?if $ipv6 == yes ? [

$management_subnet=aefd::/64
$infrastructure_subnet=aced::/64
$oam_subnet=abcd::/64
]


--------------- Determine OS
# look at shell to see if it ends in "exe"
>echo $SHELL
+$shell=bash(.*)
?if $shell == .exe ? [
	; === make adjustments for windows host
	#$USER=$USERNAME
	$vboxmanage=$vboxmanage_win
	$console_connect=$console_win
	$boot_image=$boot_image_win
	# parse for boot image directory
	$boot_image_dir=$boot_image
	=$boot_image_dir;(/.+/)\w.+;\1;
	$drivec=/drives/c
	#adjust max wait time for windows
	$max=300
	$ping_opt= -n 5 
]::[
	; === using linux host
	$vboxmanage=$vboxmanage_linux
	$console_connect=$console_linux
	$drivec=
	$ping_opt= -c 5 
]
>

#----------------
##determine parts
#; === determining install phases
#>ping -c 2 -W 2 $IP
#+$ping_resp=(time=)
#>
#?if $ping_resp == time= ?[
#	; === connecting to controller
#	@45
#	>ssh -X -o UserKnownHostsFIle=/dev/null -o StrictHostKeyChecking=no $user@$IP
#	-<WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED
#	<ssword:|WARNING:
#	>>$pass
#	>
#	>if [ -e /opt/platform/config/15.00/cgcs_config ]; then echo "config_run"; fi
#	+$file_resp=\n(config_run)
#	>
#	?if $file_resp == config_run? [
#		$part=3
#		; == setting Phase 3
#	]
#	>exit
#	>
#]

----------------
#troubleshooting parts
$part=1
# part 1 beginning
# part 2 after install, but before config_controller
# part 3 after config_controller, but before adding controller-1

?if $part == 2? [
	@100
	; === get serial port
	>$vboxmanage showvminfo controller-0 | grep --color -i serial | cat
	+$serial_pipe='(.+)'
	; === restart install BEFORE config_controller (part 2)
	*FORK serial
	; === connect to serial port
	@5
	#>export TERM=tty
	>$console_connect
	
	?if $part == 2? %PART2	
]

?if $part == 4? %PART4

?if $part == 3? [
	; === Restart install AFTER config_controller (part 3)
	*FORK SSH
#	*FORK $connection
	>export TMOUT=0
        @20
	; === connecting to controller
	?if $connection==SSH ? [
		@45
		>ssh -X -o UserKnownHostsFIle=/dev/null -o StrictHostKeyChecking=no $user@$IP
		-<WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED
		<ssword:|WARNING:
		>>$pass
		>              
	] :: [ 
		; === connect to serial port
		@5
		#>export TERM=tty
		>$console_connect
	]   
	>export TMOUT=0
            
	; === show version
	>cat /etc/build.info
	>
	?if $part == 3? %PART3
]


---------------- Set up Proxy

; === set up proxy to pull down boot_image
?if $install_tenant_files !=no? [
	$proxy_server=128.224.150.21
	@2
	; === start socat proxy
	>which socat
	<bin/socat
	>socat TCP4-listen:$proxy_port,fork,reuseaddr TCP4:$proxy_server:80 &
	>>
]

---------------- Wipe disks on Vbox system
; === test vbox manage app
>$vboxmanage list
-<Warning:
-<Error
<Usage:

?if $wipe_disk == yes? [
	; === list  vms
	>PS1='\$ '
	$prompt=\$ 
	# clear colour aliases
	>alias grep='grep'
	>alias egrep='grep -E'
	# get list of running VMs
	>$vboxmanage list vms | awk '{print $1}' | tr -d '"' | egrep 'controller|compute'; echo "#"
	+$host_list=\n((.|\n|\r)*)#
	
	; === shut down Vbox VMs
	>$vboxmanage controlvm controller-0 poweroff
	[ $node=$node_list
		>$vboxmanage controlvm $node poweroff
	]
	>
	>
	; === Wipe Disks on Vbox
	# only controller-0 in list, skip wipedisk
	?if $node_list != $blank? [
		[ $host=$node_list
			>$vboxmanage showvminfo $host | grep vdi
			+$vdi_disk=IDE \(\d, \d\): (.*\.vdi)
			=$vdi_disk - C:
			=$vdi_disk;\\;/;
			; --- wiping VM:$host VDI:$vdi_disk
			?if $drivec == $blank? [
				>printf '\xa1\xa1\xa1\xa1\xa1\xa1\xa1\xa1' | dd conv=notrunc of="$vdi_disk" bs=1 seek=$((0x00200000))
			]::[
				# in win env
				>printf '\xa1\xa1\xa1\xa1\xa1\xa1\xa1\xa1' | dd conv=notrunc of="$drivec$vdi_disk" bs=1 seek=$((0x00200000))
			]
		]

	]
]

---------------- Get Boot image

; === fix up $USER if not set
>id
+$USER=uid=\d+\((\S+)\)


; === get latest boot image
# make dir for image
?if $shell == .exe ? cd /drives/c/Users/$USER
>mkdir -p $boot_image_dir
@600
?if $pull_new_image != no? [
	>scp $source_image $boot_image
]::[
	# pull only if needed
	>if [ ! -e $boot_image ]; then scp $source_image $boot_image ; fi
]

; === NEXT: attach boot image to CD drive

>
@5
*INTERACT


## May need to be smarter about port/device numbers
# need to call windows vbox manage with windows path NOT cygwin path
=$boot_image - /drives/c
>$vboxmanage storageattach controller-0 --storagectl IDE --type dvddrive --medium $boot_image --port 1 --device 0


; === get serial port
>$vboxmanage showvminfo controller-0 | grep --color -i serial | cat
+$serial_pipe='(.+)'


*FORK default
; === boot controller-0
@15
>$vboxmanage startvm controller-0 $vbox_opts
#>$vboxmanage controlvm controller-0 pause
#>$vboxmanage controlvm controller-0 resume
>
!sleep 2
>
*FORK serial
; === connect to serial port
@120
>export TERM=tty
#>socat UNIX-CONNECT:$serial_pipe - 
>$console_connect

>>^J
>>^I
>>^M
<Starting Anaconda
>>^C
>
*FORK default

!sleep 2

@2000
*FORK serial
>>^M
; === protect against blue screen of death
#>socat UNIX-CONNECT:$serial_pipe - | egrep -i 'restarting system'
>$console_connect | egrep -i 'Restarting system'
#>$console_connect | egrep -i 'booting'


<Restarting system
>>^C
; === reconnect to serial
>$console_connect
<login: 

@5
; === initial login
*/.*: /
>wrsroot
<assword
>>wrsroot
#current
<UNIX.*assword
>wrsroot
<New password
>$pass
<assword
>$pass


%PART2
----------- Bring up OAM interface

; === set up sudo root access (to make it easier later in the interact session)
>echo "$pass" | sudo -S id
<root
>export TMOUT=0

; === setup first IP interface
>sudo /sbin/ip addr add $IP/24 dev $eth0
>sudo /sbin/ip link set $eth0 up
>ping $ping_opt  $IP
<time=
>
>

*FORK SSH
; === ping controller
>ping $ping_opt $IP
<time=

; === connecting to controller

@45
>ssh -X -o UserKnownHostsFIle=/dev/null -o StrictHostKeyChecking=no $user@$IP
-<WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED
<ssword:|WARNING:
>>$pass
>
>export TMOUT=0

@3
; === set up sudo root access (to make it easier later in the interact session)
>echo "$pass" | sudo -S id
<root

; === show version
>cat /etc/build.info



; === install tenant files and guest images
$install_tenant_files=yes
$directory=R5_files
?if $install_sw !=no? [	
	# get IP address of host (use netstat -an | grep :22)
	>netstat -an | grep :22
	+$ssh_client=([0-9.]{7,15}):\d+\s+ESTABLISHED
	$url=$ssh_client
        #yow-cgcs-test
	#$url=128.224.150.21
	>cd
	; === place install files/images on controller
	@100
#	>time wget -r --no-parent  -nd -nH  --reject "index.html*" --reject "*new_query_string" http://$url:$proxy_port/files/install/
#	<real

	; === grab lab_setup files
	$file_list=lab_setup.conf.hp380 lab_setup.conf.ip1-4 lab_setup.conf.ip20-27 lab_setup.conf.ip7-12 lab_setup.conf.vbox lab_setup.sh lab_cleanup.sh server-with-key-with-passwd.pem server-with-key.pem system_config
	[ $file=$file_list
		>wget  http://$url:$proxy_port/files/install/$directory/$file
	]
	; === place install files/images on controller
	$file_list=heat.tgz license.lic cgcs-guest.img precise-server-cloudimg-amd64-disk1.password_enabled.img Titanium-Server-SDK-14.10-b8.tgz
	[ $file=$file_list
		>wget  http://$url:$proxy_port/files/install/$directory/$file
		>
	]
######################## Patching begin ##############################
	?if $patch == yes ? [
		@1500
		; === Copying Patch file for 15.12
		>wget -r -nH -nd -np -R index.html* --no-parent http://10.10.10.254:8088/files/install/R2_patches/
		>mkdir patches
		>mv *.patch patches/
		>sudo sw-patch query
		>
		; === Upload Patches
		>sudo sw-patch upload-dir /home/wrsroot/patches/
		>sudo sw-patch query
		>sudo sw-patch query-hosts
		; === Apply Patches
		>sudo sw-patch apply --all
		; === Install Patches
		>sudo sw-patch install-local
		<Patch installation is complete
		; === set up sudo root access (to make it easier later in the interact session)
		>echo "$pass" | sudo -S id
		<root
                >sudo sw-patch query
                >sudo sw-patch query-hosts
		; === Reboot the controller
		>sudo reboot
		*FORK serial
		>>^M
		; === reconnect to serial
		>$console_connect
		<login:

		@5
		; === initial login
		*/.*: /
		>wrsroot
		<assword
		>$pass
		----------- Bring up OAM interface again

		; === set up sudo root access (to make it easier later in the interact session)
		>echo "$pass" | sudo -S id
		<root
		>export TMOUT=0

		; === setup first IP interface
		>sudo /sbin/ip addr add $IP/24 dev eth0
		>sudo /sbin/ip link set eth0 up
		>ping $ping_opt  $IP
		<time=
		>
		>

		*FORK SSH
		; === ping controller
		>ping $ping_opt $IP
		<time=

		; === connecting to controller

		@45
		>ssh -X -o UserKnownHostsFIle=/dev/null -o StrictHostKeyChecking=no $user@$IP
		-<WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED
		<ssword:|WARNING:
		>>$pass
		>
		>export TMOUT=0

		@3
		; === set up sudo root access (to make it easier later in the interact session)
		>echo "$pass" | sudo -S id
		<root

		; === show version
		>cat /etc/build.info
                >sudo sw-patch query
                >sudo sw-patch query-hosts
		
	]
######################## Patching Ends ###############################
	
	>
	>
	@5
	>mkdir images
	>mv *img images/
	>rm *img.1
	>chmod 755 ./lab_setup.sh
	>tar xvzf $heat_tarball
	>ls
	>
	; === set up ssh keys
	>ssh-keygen -t dsa -f /home/wrsroot/.ssh/id_rsa -N "" -q
	#>nova keypair-add --pub_key ~/.ssh/id_rsa.pub controller-0
	?if $part == 2 ?[
		<Overwrite
		>y
	]	

]

; === cp vbox labsetup file
>cp lab_setup.conf.vbox  lab_setup.conf
; === wait for files to copy 
!sleep 30
; === NEXT: config controller
>
*INTERACT
*EXP_INFO
*FORK $connection
; === Configuring Controller Interface with Scenario $controller_consolidation
>export TMOUT=0
>time sudo config_controller
<time correct
>y
<Cinder storage backend
>$storage_type
<Database storage
>>^M
?if $storage_type == lvm ? [
	<Image storage 
	>>^M
]
<Image conversion space
>>^M
<Backup storage
>>^M
?if $storage_type == lvm ? [
	<Volume storage location
	>>^M
	<Volume storage in GiB
	>>^M
]
<Cinder LVM type
>>^M

?if $sdn == yes ? [
	<Enable SDN Network configuration
	>>y
]

?if $sdn == no ? [
	<Enable SDN Network configuration
	>>n
]

<Configure a separate PXEBoot network
>$pxe_network

?if $pxe_network == y ? [
	<PXEBoot subnet
	>>^M
	<Management interface link aggregation
	>>^M
	<Management interface
	>>$management_interface
	<Management interface MTU
	>>^M
	<Management interface link capacity Mbps
	>>^M
	<Management VLAN Identifier
	>$management_VLAN_ID
	<Management subnet
	>$management_subnet
	<Use entire management subnet
	>>^M
	<Dynamic IP address allocation
	>>^M
	<Management Network Multicast subnet
	>>^M
]


?if $pxe_network == n ? [
	; === Configuring Management Interface 
	<Management interface link aggregation
	>>^M
	<Management interface
	>>$management_interface
	<Management interface MTU
	>$management_interface_MTU
	<Management interface link capacity Mbps
	>>^M
	<Management subnet
	>$management_subnet
	<Use entire management
	>Y
	<Dynamic IP address allocation
	>Y
	<Management Network Multicast subnet
	>>^M
]

<Configure board management control network
>>N


; === Configuring Infrastructure Interface 

<Configure an infrastructure interface
>$configure_infrastructure_interface
?if $configure_infrastructure_interface == Y ? [
	<Infrastructure interface link aggregation
	>$infrastructure_interface_link_aggregation
	<Infrastructure interface
	>$infrastructure_interface
	<Configure an infrastructure VLAN
	>$configure_infrastructure_VLAN
	?if $configure_infrastructure_VLAN == Y ? [
		<Infrastructure VLAN Identifier
		>$infrastructure_VLAN_ID
	]
	<Infrastructure interface MTU
	>$infrastructure_interface_MTU
	<Infrastructure interface link capacity Mbps
	>^M
	<Infrastructure subnet
	>$infrastructure_subnet
	<Use entire infrastructure subnet
	>y

]

; === Configuring OAM Interface 
 
       <External OAM interface link aggregation
        >$OAM_interface_link_aggregation
        <External OAM interface
        >$OAM_interface
        <Configure an external OAM VLAN
       	>$configure_OAM_VLAN
	?if $configure_OAM_VLAN == Y ? [
		<External OAM VLAN Identifier
		>$OAM_VLAN_ID
	]	
]

<External OAM interface MTU
>$OAM_interface_MTU
<External OAM subnet
>$oam_subnet
<External OAM gateway address
>>^M
<External OAM floating address
>>^M

<External OAM address for first controller node
>>^M

<External OAM address for second controller node
>>^M
<External OAM Network Multicast subnet
>>^M


<License File
>>^M
?if $rel3 == yes? [
	<wrsroot password age
	>>^M
]
?if $https == no? [ 
	<Use secure
	>N
	<Install custom firewall rules
	>N
]

?if $https == yes? [ 
	<Use secure
	>y
	<Use WRS provided 
	>n
	<CA-Signed Certificate
	>server-with-key-with-passwd.pem
	<Password for the CA-Signed
	>li69nux
	<Install custom firewall
	>N
]

<Create admin user password
!send "$admin_password\r"
<Repeat admin user password
!send "$admin_password\r"
<Apply the above configuration
@1500
>y
<real
; === wait for config controller to do its thing
>
>
>
?if $patch == yes ?[
	>source /etc/nova/openrc
	>sudo sw-patch query
        >sudo sw-patch query-hosts
]

*NOEXP_INFO

%PART3


; ================ install remaining of nodes


[ $node=$node_list
	@10
	*FORK $connection	
	; === determine node type
	$node_type=$node
	=$node_type/(controller|compute|storage)-\d/\1/
	; === NEXT: start up next node - $node
	*INTERACT
	>$vboxmanage startvm $node $vbox_opts
	>

	# Conect to SSH or serial based on OAM network 
	*FORK $connection
	#*FORK serial
	; === Assign node $node
	>source /etc/nova/openrc 
	!sleep 20
	# create key if needed
	>if [ ! -e ~/.ssh/id_rsa.pub ]; then nova keypair-add --pub_key ~/.ssh/id_rsa.pub controller-0; fi

	$i=0
	$next_host=__NO_STRING_CAPTURED__
	[ $next_host == __NO_STRING_CAPTURED__
		>system host-list
		+$next_host=(None)
		+$id=\n\| (\d+)\s+\| None
		?if $next_host == None? [
			?if $node_type == controller? >system host-update $id personality=controller
			?if $node_type == compute ? >system host-update $id personality=compute hostname=$node
			?if $node_type == storage ? >system host-update $id personality=storage
			>
		]
		!sleep 2
		+$i
		?if $i > $max? %BREAK_CONTROLLER1
	]
	%BREAK_CONTROLLER1

]

%PART4
*FORK $connection
# controller in node list?
$node_controllers=$node_list
=$node_controllers/.*(controller)-\d.*/\1/
>

@100

#; === Get the infra interface name from controller-0 

>system host-if-list controller-0 
#!sleep 5
#+$infra_name=[0-9a-z-]{24,50}\s* \|\s+(infra\d|eth\d.\d+)\s*|s*infra

$node_storage=$node_list
=$node_storage/.*(storage)-\d.*/\1/
?if $node_storage == storage ? [
	; === unlock storages
	#$storage_list=$node_list
	#=$storage_list - controller-1
	#=$storage_list - compute-0
	#=$storage_list - compute-1
	[ $node=$storage_list
		; === wait for $node to come online
		@60
		#$storage=storage-0
		$i=0

		$state=none
		[ $state != online
			; === wait for $node to come online
			>system host-list
			<$node
			+$state=(available|online|offline)

			!sleep 5
			+$i
			?if $i > $max? [
				;red $node did not become online
				# break out of while loop
				$state=online
				$i=0
				; Giving user the option to recover the lab
				*INTERACT
			]
		]

		>system host-list


		?if $configure_infrastructure_interface == Y ? [
			?if $configure_infrastructure_VLAN == Y ? [
				>system host-if-add -V $infrastructure_VLAN_ID -nt infra $node $infra_name vlan $storage_infra_interface
				!sleep 2
				<created_at
			]
			?if $configure_infrastructure_VLAN == N ? [
				>system host-if-modify -n $infra_name -nt infra  $node $storage_infra_interface
				!sleep 2
				<created_at
			]
		]	

		?if $node_controllers == controller ? [
			@60
			$i=0
			$controller_node=controller-1
			$state=none
			>system host-list
			<$controller_node
			+$state=(available|online|offline|failed|intest)
			?if $state == offline ? [
				[ $state != online
					$state=none
					[ $state != online
						; === wait for $controller_node to come online
						>system host-list
						<$controller_node
						+$state=(available|online|offline|failed|intest)

						!sleep 5
						+$i
						?if $i > $max? [
							;red $controller_node did not become online
							# break out of while loop
							$state=online
							$i=0
							; Giving user the option to recover the lab
							*INTERACT
						]
					]
				]	
			]

			; === check to see if controller became online 

			@60
			$i=0
			$controller_node=controller-1
			$state=none
			>system host-list
			<$controller_node
			+$state=(available|online|offline|failed|intest)
			[ $state != online
				$state=none
				[ $state != online
					; === wait for $controller_node to come online
					>system host-list
					<$controller_node
					+$state=(available|online|offline|failed|intest)

					!sleep 5
					+$i
					?if $i > $max? [
						;red $controller_node did not become online
						# break out of while loop
						$state=online
						; Giving user the option to recover the lab
						$i=0
						*INTERACT
					]
				]
			]
			; === Unlock $controller_node 
		
			>system host-list
			<$controller_node
			+$administrative=(locked|unlocked)
			?if $administrative == locked ? [
		 	    >system host-if-modify -n oam0 -nt oam controller-1 $(system host-if-list -a controller-1 | awk '{if ($4 == "$eth0") { print $2;}}')
			    >system host-stor-add controller-1 cinder $(system host-disk-list controller-1 | awk '{if ($4 == "/dev/sdb") { print $2;}}')

		            ?if $configure_infrastructure_interface == Y ? [
			    ?if $configure_infrastructure_VLAN == Y ? [
				>system host-if-add -V $infrastructure_VLAN_ID -nt infra $controller_node $infra_name vlan $controller_infra_interface
				!sleep 2
				<created_at
			        ]
		            ?if $configure_infrastructure_VLAN == N ? [
				>system host-if-modify -n $infra_name -nt infra  $controller_node $controller_infra_interface
				!sleep 2
				<created_at
			        ]
		            ]
			    ; ==== Unlock $controller_node
			    >system host-unlock $controller_node
			]
			$state=none		
			[ $state != available
				; === wait for $controller_node to come available
				!sleep 3
				>system host-list
				<$controller_node
				+$state=(available|online|offline|failed|intest)
				!sleep 5
				+$i
				?if $i > $max? [
					;red $controller_node did not become available
					# break out of while loop
					$state=available
					$i=0
					; Giving user the option to recover the lab
					*INTERACT
				]
			]
		]

		; === Add OSD to $node

		>system host-disk-list $node
		>system host-disk-list $node | grep /dev/sdb
		+$storage_device_uuid=([0-9a-f-]{32,36})\s* \|\s+/dev/sdb
		>system host-stor-add storage-0 $storage_device_uuid

		@15
		>system host-unlock $node
		-<Can not unlock
		; Please make sure the storage are unlocked and infrastructure is configured if you enabled
		>system host-list
		*INTERACT


		@60
		#$storage=$node
		$i=0
		; === wait for $node to come available

		$state=none
		[ $state != available
			; === wait for $node to come available
			>system host-list
			<$node
			+$state=(available|online|offline|failed|intest)

			!sleep 5
			+$i
			?if $i > $max? [
				;red $node did not become available
				# break out of while loop
				$state=available
				$i=0
				; Giving user the option to recover the lab
				*INTERACT
			]
		]
	]
]
# configure lab_setup?
$node_computes=$node_list
=$node_computes/.*(compute)-\d.*/\1/
*INTERACT
; === Wait for Computes to come Online/ stopped before lab_setup
?if $node_computes == compute ? [
	; === Computes present, run lab_setup
	>
	#----------- 1 of 3 Lab_setup
	@300
	>time ./lab_setup.sh
	<real
	>echo $?
	+$return=\n(\d)
	#oops, run lab_setup again
	?if $return != 0? >time ./lab_setup.sh
	>
	[ $node=$compute_list
		; === wait for $node to come online
		@60
		#$compute=compute-0
		$i=0

		$state=none
		[ $state != online
			; === wait for $node to come online
			>system host-list
			<$node
			+$state=(available|online|offline)

			!sleep 5
			+$i
			?if $i > $max? [
				;red $compute did not come online
				# break out of while loop
				$state=online
				; Giving user the option to recover the lab
				*INTERACT
			]
		]
	]
	>system host-list
	
	?if $node_controllers == controller ? [
		@60
		$i=0
		$controller_node=controller-1
		>system host-list
		<$controller_node
		+$administrative=(locked|unlocked)
		?if $administrative == locked ? [
			$state=none
			>system host-list
			<$controller_node
			+$state=(available|online|offline|failed|intest)
			[ $state != online
				$state=none
				[ $state != online
					; === wait for $controller_node to come online
					>system host-list
					<$controller_node
					+$state=(available|online|offline|failed|intest)
	
					!sleep 5
					+$i
					?if $i > $max? [
						;red $controller_node did not become online
						# break out of while loop
						$state=online
						; Giving user the option to recover the lab
						$i=0
						*INTERACT
					]
				]
			]

		]

		$state=none
		>system host-list
		<$controller_node
		+$state=(available|online|offline|failed|intest)
		?if $state == online		
			>system host-list
			<$controller_node
			+$administrative=(locked|unlocked)
			?if $administrative == locked ? [
 			    >system host-if-modify -n oam0 -nt oam controller-1 $(system host-if-list -a controller-1 | awk '{if ($4 == "$eth0") { print $2;}}')
			    >system host-stor-add controller-1 cinder $(system host-disk-list controller-1 | awk '{if ($4 == "/dev/sdb") { print $2;}}')
        		    ?if $configure_infrastructure_interface == Y ? [
				    ?if $configure_infrastructure_VLAN == Y ? [
					>system host-if-add -V $infrastructure_VLAN_ID -nt infra $controller_node $infra_name vlan $controller_infra_interface
					!sleep 2
					<created_at
				    ]
			            ?if $configure_infrastructure_VLAN == N ? [
					>system host-if-modify -n $infra_name -nt infra  $controller_node $controller_infra_interface
					!sleep 2
					<created_at
				    ]
			    ]
			    ; === Unlock  
		            >system host-unlock $controller_node
		  	]
		]
	]

	#----------- 2 of 3 Lab_setup
	@300
	>time ./lab_setup.sh
	<real
	>echo $?
	+$return=\n(\d)
	#oops, run lab_setup again
	?if $return != 0? >time ./lab_setup.sh
	>


	*INTERACT
	; === stopped before Unlock of Computes
	?if $configure_infrastructure_interface == Y ? [
		[ $node=$compute_list
		
			?if $configure_infrastructure_VLAN == Y ? [
				>system host-if-add -V $infrastructure_VLAN_ID -nt infra $node $infra_name vlan $compute_infra_interface
			]
			?if $configure_infrastructure_VLAN == N ? [
				>system host-if-modify -n $infra_name -nt infra  $node $compute_infra_interface
				!sleep 2
				<created_at
			]
			>system host-unlock $node
			-<Can not unlock	
		]

	]

	[ $node=$compute_list
		; === wait for computes to be available
		@60
		#$compute=compute-1
		$i=0

		$state=none
		[ $state != available
			; === wait for $node to come available
			>system host-list
			<$node
			+$state=(available|online|offline|failed|intest)

			!sleep 5
			+$i
			?if $i > $max? [
				;red $node did not come available
				# break out of while loop
				$state=available
				$i=0
				; Giving user the option to recover the lab
				*INTERACT
			]
		]
	]
	@5

	#----------- 3 of 3 Lab_setup
	@800
	>time ./lab_setup.sh
	<real
	>echo $?
	+$return=\n(\d)
	#oops, run lab_setup again
	?if $return != 0? >time ./lab_setup.sh

	# configure computes
]
>
; === Adding tempest.conf info (in order to run nosetest)
>echo "$pass" | sudo -S id
<root
$tempest_conf=/etc/tempest/tempest.conf
>cp $tempest_conf $tempest_conf.bak
>sudo chmod 666 $tempest_conf

Add to tempest.conf to run tests	
>echo "   " >> $tempest_conf
>echo "### inserted by vbox_install ### " >> $tempest_conf

# juno tempest.conf
>sed -r 's;uri = http://127.0.0.1:8081/keystone/main/v2.0/;uri = http://controller:5000/v2.0/;' -i $tempest_conf
>sed -r 's;uri_v3 = http://127.0.0.1:8081/keystone/main/v3/;uri_v3 = http://controller:5000/v3/;' -i $tempest_conf

# havana tempest.conf
>sed -r 's;uri = http://127.0.0.1:5000/v2.0/;uri = http://controller:5000/v2.0/;' -i $tempest_conf
>sed -r 's;uri_v3 = http://127.0.0.1:5000/v3/;uri_v3 = http://controller:5000/v3/;' -i $tempest_conf
>sed -r 's;admin_password = password;admin_password = admin;' -i $tempest_conf
>echo "# add at bottom of file" >> $tempest_conf
>echo "[host_credentials]" >> $tempest_conf
>echo "host_user= wrsroot" >> $tempest_conf
>echo "host_password = li69nux" >> $tempest_conf
>						

# show controller-1 message
#?if $node_controllers == controller? [
#	;purple NOTE: controller-1 is just completing installation, and will need another few minutes to finish booting
#	>
#]


?if $node_controllers == controller ? [
	@60
	$i=0
	$controller_node=controller-1
	; === check again to see if controller is in unlocked state
	>system host-list
	<$controller_node
	+$administrative=(locked|unlocked)
	?if $administrative == locked ? [
	    >system host-unlock controller-1
	]
	$state=none		
	[ $state != available
		; === wait for $controller_node to come available
		>system host-list
		<$controller_node
		+$state=(available|online|offline|failed|intest)
		!sleep 5
		+$i
		?if $i > $max? [
			;red $controller_node did not become available
			# break out of while loop
			$state=available
			; Giving user the option to recover the lab
			*INTERACT
		]
	]
]

?if $patch == yes ?[
        >sudo sw-patch query
        >sudo sw-patch query-hosts
]

; === Install Complete!!
>

*INTERACT


; === pau
>
#!/usr/bin/env bash
# make this auto-runnable! 
# Little bootstrap bash script to run kick start expect-lite script

#
# Change the environment variables to allow auto login to remote machine
#		e.g. vbox_install.elt -r <remote machine>
#
export EL_CONNECT_METHOD=ssh_key


# re-run the script as an expect-lite script
/usr/bin/env expect-lite c=$0 $*

