#!/usr/bin/env expect-lite

# How to use this expect-lite file, Lines that begin with:
#	'>' send to remote host, implies "wait for prompt"
#	'<' _MUST_ be received from the remote host, or this config script will fail
#	# are comment lines, and have no effect
#	; are printable (in stdout) comments, and have no other effect
#	@ change the expect timeout value
#	! Embedded Expect commands
# For more info see: expect-lite.html
;;;
#
#	TC622	Run 10 cold/live migrations.

#
Options:
.	max=5		maximum migrations
.	vm_name_list=<list of vm names>
;;;
Steps:
1)  Log onto controller
2)  Get list of VM victims
3)  Migrating count:$j
4)  COLD MIGRATE VM $vm_name
5)  Wait for  VM to become cold-migrating
6)  Cold migrate VM $vm_name
7)  LIVE MIGRATE VM $vm_name
8)  Wait for  VM to become migrating
9)  Wait for  VM to become active
10) ssh to VM and write to FS

*NOFAIL
*EXP_INFO

# common include path
$inc_path=common/el

# fail script
#*~$inc_path/util/fail_show.inc

$IP=10.10.10.2

$max_wait=60

#cold migrate?
$cold=yes
$cold=no

$max=5
##### nat box and VM login info #######
$natbox=128.224.150.11

# cgcs credentials
$vm_user=root
$vm_pass=root

$vm_fs_cmd=while (true) do date; dd if=/dev/urandom of=output.txt bs=1k count=1 || break ; echo ; sleep 1; done 2>&1 > trace.txt &
$vm_fs_cmd=dd if=/dev/urandom of=output.txt bs=1k count=1 

$vm_cmd_fs_check=mount | grep 'on / type' | grep 'rw,re'
##################################


tenant2-avp2
tenant6-avp4
$vm_name_list=tenant0-avp2 tenant3-virtio4

; === log onto controller
~$inc_path/node/ssh_controller.inc

@15

$net=4
; === get list of VM victims
>nova list --all-tenants | grep 'net$net=172' | awk '{print $4}' | paste -sd' '
+$vm_name_list=\n(.+)


$j=0

@15
[ $j < $max
	; === Migrating count:$j 
	[ $vm_name=$vm_name_list
		#need VM UUID
		~$inc_path/vm/get_vm_type.inc vm_name=$vm_name

		?if $cold==yes? [
			$ACTION=migrate
			; === COLD MIGRATE VM $vm_name
			>nova $ACTION $vm_uuid

			; === wait for  VM to become cold-migrating
			~$inc_path/vm/wait_vm_active.inc vm_name=$vm_name vm_state=VERIFY_RESIZE
			$ACTION=resize-confirm
			; === cold migrate VM $vm_name
			>nova $ACTION $vm_uuid
		]::[
			$ACTION=live-migration

			; === LIVE MIGRATE VM $vm_name
			>nova $ACTION $vm_uuid

			; === wait for  VM to become migrating
			~$inc_path/vm/wait_vm_active.inc vm_name=$vm_name vm_state=MIGRATING
		]
		
		; === wait for  VM to become active
		~$inc_path/vm/wait_vm_active.inc vm_name=$vm_name 
		; === get VM IP
		>nova list --all-tenants | grep $vm_name
		+$vm_ip_list=$tenant-mgmt-net=([0-9.:]{7,37})
		
		*INTERACT
		*FORK NATBOX
		; === log onto nat box
		~$inc_path/node/ssh_node.inc user=cgcs IP=$natbox
		>which ssh

		; === start FS commands on VMs
		[ $vm_ip=$vm_ip_list
			>ping -c3 $vm_ip
			~$inc_path/node/ssh_node.inc IP=$vm_ip user=$vm_user pass=$vm_pass
			; === execute FS commands
			>$vm_fs_cmd && $vm_fs_cmd && $vm_fs_cmd
			<\d+\.\d MB/s
			>
			; === execute FS commands
			>$vm_cmd_fs_check
			>$vm_cmd_fs_check | wc -l
			<\n1

			>
			>exit
			>
		]
		*FORK default
		>


	]
	

	>



	#*INTERACT

	+$j
]

*INTERACT
