#!/usr/bin/env expect-lite

# How to use this expect-lite file, Lines that begin with:
#	'>' send to remote host, implies "wait for prompt"
#	'<' _MUST_ be received from the remote host, or this config script will fail
#	# are comment lines, and have no effect
#	; are printable (in stdout) comments, and have no other effect
#	@ change the expect timeout value
#	! Embedded Expect commands
# For more info see: expect-lite.html
;;;
#
#	system test node reboot
#	TC910 Measure Node Reboot Times
#
#
#
#	Options:
#		node=<desired node name to reboot>

;;;

*NOFAIL
*EXP_INFO

# common include path
$inc_path=common/el

# fail script
#*~$inc_path/util/fail_show.inc

$IP=10.10.10.2

#default node to reboot
$node=compute-1

$max=120

; === include time functions
~$inc_path/util/tcl_functions.inc
#define time vars
$time_start=0
$time_fin=0
$time_start_str= 


; === log onto controller
~$inc_path/node/ssh_controller.inc

; === reboot node
!mark_time time_start
~$inc_path/node/reboot_node.inc node=$node force=yes

; === ping node waiting for it to return
@200
>ping -c 200 $node
<ttl=6\d
>>^C
>

; === log into failed node once console is up (may have to look at console)
*INTERACT

; === log onto node
~$inc_path/node/ssh_controller.inc IP=$node

$i=0
$goenabled=__NO_STRING_CAPTURED__
[ $goenabled==__NO_STRING_CAPTURED__
	; === waiting for goenabled:$i
	>ls -l --full-time /var/run/goenabled
	+$goenabled=(\d+-\d+-\d+ \S+)
	!mark_time time_fin
	>
	
	!sleep 5
	+$i
	?if $i < $max ?%BREAK
]
%BREAK


!show_time time_start time_start_str
>


;; === time start:$time_start_str
;; === time end  :$goenabled
		; === calculate elasped time
		$time_elapse=$time_fin
		=$time_elapse - $time_start
;; === approx elapsed time:$time_elapse ms


*INTERACT
