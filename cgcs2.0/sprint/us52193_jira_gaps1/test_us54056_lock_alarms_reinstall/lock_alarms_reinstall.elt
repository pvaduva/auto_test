#!/usr/bin/env expect-lite

;;;

Lock alarms Script

Steps:
1)  Delete alarms with id 200.001 (host locked alarms)
2)  Lock controller-1
3)  Wait for controller-1 become locked
4)  Check alarm with id 200.001 (host locked alarm) generated
5)  Unlock controller-1
6)  Wait for controller-1 become available
7)  Check alarm clears
8)  Delete the controller node this time
9)  Delete alarms with id 200.001 (host locked alarms)
10)  Lock controller-1
11)  Wait for controller-1 become locked
12)  Check alarm with id 200.001 (host locked alarm) generated
13)  Delete controller-1
14)  Check alarm clears
15)  Delete the compute node this time
16)  Delete alarms with id 200.001 (host locked alarms)
17)  Lock compute-0
18)  Wait for compute-0 become locked
19)  Check alarm with id 200.001 (host locked alarm) generated
20)  Delete compute-0
21)  Check alarm clears


REQUIRES: expect-lite 4.8.0 or greater
This expect script can be invoked via the following:
./lock_alarms.elt <host> <username> <password>
where:
host = IP address of the controller, e.g. 10.10.10.2
username = username on the controller, e.g. wrsroot
password = password on the controller, e.g. li69nux
;;;


*EXP_INFO
*NOFAIL

# Varibles that will become constants from script options
$HOST_USER=wrsroot
$HOST_PASS=li69nux
$HOST_IP=10.10.10.2
$VM=root
@20

>ssh -X -o UserKnownHostsFIle=/dev/null -o StrictHostKeyChecking=no $HOST_USER@$HOST_IP
-<WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED
<ssword:|Last login:
>>$HOST_PASS
>export TMOUT=0
>source /etc/nova/openrc
>system show
>cat /etc/build.info

; === delete alarms with id 200.001 (host locked alarms)
[ $ALARM != __NO_STRING_CAPTURED__
    >system alarm-list
    +$ALARM=(200.001)

    ?if $ALARM == 200.001? [
        >system alarm-list
        +$ALARM=([0-9a-f-]{36}) \| 200.001
        >system alarm-delete $ALARM
    ]
]
; === Lock controller-1
>system host-list
+$CONT1_ID=([0-9]).* \| controller-1
>system host-lock $CONT1_ID

; === wait for controller-1 become locked
$i=0
$MAX=12
$result=none
# while loop
[ $result != locked
    +$i
    >system host-list
    +$result=$CONT1_ID .* \| (unlocked|locked)
    ?if $i > $MAX ? ; === $CONT1_ID did not lock
    ?if $i > $MAX ? %fail_to_lock
    !sleep 5
]

!sleep 10
; === check alarm with id 200.001 (host locked alarm) generated
>system alarm-list
<200.001
<400.002


; === unlock controller-1
>system host-unlock $CONT1_ID

; === wait for controller-1 become available
$i=0
$MAX=100
$result=none
# while loop
[ $result != available
    +$i
    >system host-list
    +$result=$CONT1_ID .* \| (available|intest|online|offline)
    ?if $i > $MAX ? ; === controller-1 did not become available
    ?if $i > $MAX ? %fail_to_boot
    !sleep 10
]

; === check alarm clears
!sleep 10
>system alarm-list
-<200.001

; === delete the controller node this time
; === delete alarms with id 200.001 (host locked alarms)
[ $ALARM != __NO_STRING_CAPTURED__
    >system alarm-list
    +$ALARM=(200.001)

    ?if $ALARM == 200.001? [
        >system alarm-list
        +$ALARM=([0-9a-f-]{36}) \| 200.001
        >system alarm-delete $ALARM
    ]
]
; === Lock controller-1
>system host-list
+$CONT1_ID=([0-9]).* \| controller-1
>system host-lock $CONT1_ID

; === wait for controller-1 become locked
$i=0
$MAX=12
$result=none
# while loop
[ $result != locked
    +$i
    >system host-list
    +$result=$CONT1_ID .* \| (unlocked|locked)
    ?if $i > $MAX ? ; === $CONT1_ID did not lock
    ?if $i > $MAX ? %fail_to_lock
    !sleep 5
]

!sleep 10
; === check alarm with id 200.001 (host locked alarm) generated
>system alarm-list
<200.001
<400.002


; === delete controller-1
>system host-delete $CONT1_ID

; === check alarm clears
!sleep 10
>system alarm-list
-<200.001

; === wait for controller node to be found again
$i=0
$MAX=12
$result=controller
[ $result != None
    +$i
    >system host-list
    +$result=(None)
    ?if $i > $MAX ? ; === controller node was not found
    ?if $i > $MAX ? %fail_to_find_cont
    !sleep 5
]

>system host-list
+$CONT1_ID=([0-9]).* \| None
>system host-update $CONT1_ID personality=controller
<Property

?if 1 < 0 ? [
    %fail_to_find_cont
    *FAIL
]

; === delete the compute node this time
; === delete alarms with id 200.001 (host locked alarms)

>system host-list
+$COMP0_ID=([0-9]).* \| compute-0
>system host-lock $COMP0_ID

[ $ALARM != __NO_STRING_CAPTURED__
    >system alarm-list
    +$ALARM=(200.001)

    ?if $ALARM == 200.001? [
        >system alarm-list
        +$ALARM=([0-9a-f-]{36}) \| 200.001
        >system alarm-delete $ALARM
    ]
]
; === Lock compute-0

; === wait for compute-0 become locked
$i=0
$MAX=12
$result=none
# while loop
[ $result != locked
    +$i
    >system host-list
    +$result=$COMP0_ID .* \| (unlocked|locked)
    ?if $i > $MAX ? ; === $COMP0_ID did not lock
    ?if $i > $MAX ? %fail_to_lock
    !sleep 5
]

!sleep 10
; === check alarm with id 200.001 (host locked alarm) generated
>system alarm-list
<200.001
<400.002


; === delete compute-0
>system host-delete $COMP0_ID

; === check alarm clears
!sleep 10
>system alarm-list
-<200.001


; === wait for compute node to be found again
$i=0
$MAX=12
$result=compute
[ $result != None
    +$i
    >system host-list
    +$result=(None)
    ?if $i > $MAX ? ; === compute node was not found
    ?if $i > $MAX ? %fail_to_find_comp
    !sleep 5
]

>system host-list
+$COMP0_ID=([0-9]).* \| None
>system host-update $COMP0_ID hostname=compute-0 personality=compute
<Property

; === wait for nodes to come online
$i=0
$MAX=200
$result=none
[ $result != __NO_STRING_CAPTURED__
    +$i
    >system host-list
    +$result=(offline)
    ?if $i > $MAX ? ; === nodes not installed
    ?if $i > $MAX ? %fail_to_find_comp
    !sleep 10
]
@200
>./lab_setup.sh

@20
>system host-unlock $COMP0_ID
>system host-unlock $CONT1_ID

; === wait for controller-1 become available
$i=0
$MAX=100
$result=none
# while loop
[ $result != available
    +$i
    >system host-list
    +$result=$CONT1_ID .* \| (available|intest|online|offline)
    ?if $i > $MAX ? ; === controller-1 did not become available
    ?if $i > $MAX ? %fail_to_boot
    !sleep 10
]

; === wait for compute-0 become available
$i=0
$MAX=200
$result=none
# while loop
[ $result != available
    +$i
    >system host-list
    +$result=$COMP0_ID .* \| (available|intest|online|offline)
    ?if $i > $MAX ? ; === compute-0 did not become available
    ?if $i > $MAX ? %fail_to_boot
    !sleep 10
]

?if 1 < 0 ? [
    %fail_to_find_comp
    %fail_to_boot
    %fail_to_lock
    *FAIL
]

; === END OF TEST
