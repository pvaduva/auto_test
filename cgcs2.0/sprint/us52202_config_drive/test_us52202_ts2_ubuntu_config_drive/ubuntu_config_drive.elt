#!/usr/bin/env expect-lite

;;;

Config-Drive Test Script

REQUIRES: expect-lite 4.8.0 or greater
This expect script can be invoked via the following:
./wrl_config_drive.elt <host> <username> <password> <NAT host> <NAT user> <NAT pass>
where:
host = IP address of the controller, e.g. 10.10.10.2
username = username on the controller, e.g. wrsroot
password = password on the controller, e.g. li69nux
NAT host = IP address of the NATBox, e.g. 128.224.150.11
NAT user = username on the NATBox, e.g. cgcs
NAT pass = password on the NATBox, e.g. li69nux
;;;

*EXP_INFO
*NOFAIL

# Varibles that will become constants from script options
$uuid=[0-9a-f-]{36}
$NAT_IP=128.224.150.11
$NAT_USER=cgcs
$NAT_PASS=li69nux
$HOST_USER=wrsroot
$HOST_PASS=li69nux
$HOST_IP=10.10.10.2
>ssh -X -o UserKnownHostsFIle=/dev/null -o StrictHostKeyChecking=no $HOST_USER@$HOST_IP
-<WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED
<ssword:|Last login:
>>$HOST_PASS
>export TMOUT=0
>source /etc/nova/openrc
>system show
>cat /etc/build.info

; === Change quotas for cinder
#$TENANT=`keystone tenant-list | grep tenant1 | awk '{print $2}'`
$TENANT=`openstack project list | grep tenant1 | awk '{print $2}'`
>cinder quota-show $TENANT
>cinder quota-update --volumes 50 $TENANT
>cinder quota-show $TENANT

@20

; === verify we can connect to NATBox
>ping -c4 $NAT_IP
<icmp
+$ping_result=(Destination Host Unreachable|ttl=|__NO_STRING_CAPTURED__)

?if $ping_result == Destination Host Unreachable ? [
    ; === NATBOX $NAT_IP not responding
    *TERM 1
]

?if $ping_result == __NO_STRING_CAPTURED__ ? [
    ; === NATBOX $NAT_IP not responding
    *TERM 1
]

; == create nova flavour if necessary
>nova flavor-list | grep wrl5.dpdk.small | awk '{print $2}'
+$FLAVOR=(101)
?if $FLAVOR == __NO_STRING_CAPTURED__ ? [
    >source /etc/nova/openrc
    >nova flavor-create wrl5.dpdk.small 101 512 0 2
    >source ./openrc.tenant1
]

; === writing user file to be injected
>echo user file > my-user-file.txt

; === Writing ubuntu_init file which allows ssh into Ubuntu VM
>echo '#!/bin/sh' > ~/images/ubuntu_init.sh
>echo '##' >> ~/images/ubuntu_init.sh
>echo '## Sample cloud-init user data script to be executed at the' >> ~/images/ubuntu_init.sh
>echo '## end of the ubuntu image initiatialization' >> ~/images/ubuntu_init.sh
>echo '##' >> ~/images/ubuntu_init.sh
>echo '' >> ~/images/ubuntu_init.sh
>echo '## Configure the system to bring up second interface on subsequent reboots' >> ~/images/ubuntu_init.sh
>echo 'cat << EOF >> /etc/network/interfaces' >> ~/images/ubuntu_init.sh
>echo 'auto eth1' >> ~/images/ubuntu_init.sh
>echo 'iface eth1 inet dhcp' >> ~/images/ubuntu_init.sh
>echo 'EOF' >> ~/images/ubuntu_init.sh
>echo '' >> ~/images/ubuntu_init.sh
>echo '## Bring the interface up if it is currently down.' >> ~/images/ubuntu_init.sh
>echo 'ifup eth1' >> ~/images/ubuntu_init.sh
>echo '' >> ~/images/ubuntu_init.sh
>echo 'newname=$(cat /etc/hostname)' >> ~/images/ubuntu_init.sh
>echo 'ipvalue=$(ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{print $1}')' >> ~/images/ubuntu_init.sh
>echo 'cat << EOF >> /etc/hosts' >> ~/images/ubuntu_init.sh
>echo '$ipvalue $newname' >> ~/images/ubuntu_init.sh
>echo 'EOF' >> ~/images/ubuntu_init.sh

; === get the necessary image and network uuids
>source ./openrc.tenant1
>glance image-list | grep ubuntu | awk '{print $2}'
+$IMAGE=($uuid)
>neutron net-list | grep tenant1-mgmt-net | awk '{print $2}'
+$TENANT_MGMT=($uuid)
>neutron net-list | grep tenant1-net0 | awk '{print $2}'
+$TENANT_NET=($uuid)
$VOL_NAME=test_us52202_ts2_vol-ubuntu-config
$VM_NAME=test_us52202_ts2_ubuntu-config
$VM=ubuntu

; === create Ubuntu cinder volume
>cinder list | grep $VOL_NAME | awk '{print $2}'
+$CINDER_VOL=($uuid)
?if $CINDER_VOL == __NO_STRING_CAPTURED__ ? [
    >cinder create --image-id $IMAGE --display-name=$VOL_NAME 3
]

; === wait for cinder volume $VOL_NAME to become available

$i=0
$MAX=24
$result=none
# while loop
[ $result != available
    +$i
    >cinder show $VOL_NAME 2>/dev/null | awk '{ if ($2 == "status") {print $4} }'
    +$result=\n(available|creating|downloading|error)
    ?if $i > $MAX ? ; === cinder volume $VOL_NAME did not become available
    ?if $i > $MAX ? %BREAK_CINDER_CREATE
    ?if $result == error ? ; === cinder volume $VOL_NAME is in error state
    ?if $result == error ? %BREAK_CINDER_CREATE
    !sleep 5
    >
]

>cinder list | grep $VOL_NAME | awk '{print $2}'
+$CINDER_ID=($uuid)

; === attach Ubuntu VM to cinder volume
>nova boot --key_name=keypair-tenant1 --flavor=101 --nic net-id=$TENANT_MGMT,vif-model=e1000 --nic net-id=$TENANT_NET,vif-model=e1000 --config-drive true --user-data /home/wrsroot/images/ubuntu_init.sh --file /tmp/foobar=./my-user-file.txt --block_device_mapping vda=$CINDER_ID:::0 $VM_NAME

; === wait for Ubuntu VM to go available
$i=0
$MAX=12
$result=none
# while loop
[ $result != ACTIVE
    +$i
    >nova show $VM_NAME 2>/dev/null | awk '{ if ($2 == "status") {print $4} }'
    +$result=\n(ACTIVE|BUILD|ERROR)
    ?if $i > $MAX ? ; === VM $VM_NAME did not become ACTIVE
    ?if $i > $MAX ? %BREAK_VM_CREATE
    ?if $result == ERROR ? ; === VM $VM_NAME is in ERROR state
    ?if $result == ERROR ? %BREAK_VM_CREATE
    !sleep 5
    >
]
!sleep 10
>nova show $VM_NAME | grep 'tenant1-mgmt-net network' | awk '{print $5}'
+$VM_IP=\n(\d+\.\d+\.\d+\.\d+)

; === ssh into Ubuntu VM via NATBox
>ssh -X -o UserKnownHostsFIle=/dev/null -o StrictHostKeyChecking=no $NAT_USER@$NAT_IP
-<WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED
<ssword:|Last login:
>>$NAT_PASS
>ssh -X -o UserKnownHostsFIle=/dev/null -o StrictHostKeyChecking=no $VM@$VM_IP
-<WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED
<ssword:|Last login:
>>$VM

; === Mount the injected files to /mnt/config
>blkid -t LABEL='config-2' -odevice
+$mount=\n(.*)
>sudo mkdir -p /mnt/config/
>sudo mount $mount /mnt/config/

; === verify existence of files and expected output
>cat /mnt/config/openstack/latest/meta_data.json
-<No such file
>cat /mnt/config/openstack/latest/user_data
-<No such file
>cat /mnt/config/openstack/content/0000
-<No such file
<user file
>sudo cat /tmp/foobar
-<No such file
<user file
>exit

>ssh -X -o UserKnownHostsFIle=/dev/null -o StrictHostKeyChecking=no $HOST_USER@$HOST_IP
-<WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED
<ssword:|Last login:
>>$HOST_PASS
>export TMOUT=0
>source ./openrc.tenant1

; === reboot Ubuntu VM
>nova reboot $VM_NAME
$i=0
$MAX=18
$result=none
# while loop
[ $result != ACTIVE
    +$i
    >nova show $VM_NAME 2>/dev/null | awk '{ if ($2 == "status") {print $4} }'
    +$result=\n(ACTIVE|REBOOT|ERROR)
    ?if $i > $MAX ? ; === VM $VM_NAME did not become ACTIVE after REBOOT
    ?if $i > $MAX ? %BREAK_VM_REBOOT
    ?if $result == ERROR ? ; === VM $VM_NAME is in ERROR state after REBOOT
    ?if $result == ERROR ? %BREAK_VM_REBOOT
    !sleep 10
    >
]
!sleep 10

; === ssh back into Ubuntu VM
>ssh -X -o UserKnownHostsFIle=/dev/null -o StrictHostKeyChecking=no $NAT_USER@$NAT_IP
-<WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED
<ssword:|Last login:
>>$NAT_PASS
>ssh -X -o UserKnownHostsFIle=/dev/null -o StrictHostKeyChecking=no $VM@$VM_IP
-<WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED
<ssword:|Last login:
>>$VM

; === mount files to /mnt/config and verify files still exist
>blkid -t LABEL='config-2' -odevice
+$mount=\n(.*)
>sudo mkdir -p /mnt/config/
>sudo mount $mount /mnt/config/
>cat /mnt/config/openstack/latest/meta_data.json
-<No such file
>cat /mnt/config/openstack/latest/user_data
-<No such file
<user data
>cat /mnt/config/openstack/content/0000
-<No such file
<user file
>sudo cat /tmp/foobar
-<No such file
<user file
>exit

>ssh -X -o UserKnownHostsFIle=/dev/null -o StrictHostKeyChecking=no $HOST_USER@$HOST_IP
-<WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED
<ssword:|Last login:
>>$HOST_PASS
>export TMOUT=0
>source ./openrc.tenant1

?if 1 < 0 ? [
    %BREAK_VM_CREATE
    %BREAK_VM_REBOOT
    *FAIL
]

; === delete Ubuntu VM
>nova delete $VM_NAME
$i=0
$MAX=12
$result=none
# while loop
[ $result != __NO_STRING_CAPTURED__
    +$i
    >nova list 2>/dev/null | grep $VM_NAME | awk '{print $4}'
    +$result=\n($VM_NAME)
    ?if $i > $MAX ? ; === VM $VM_NAME did not delete
    ?if $i > $MAX ? %BREAK_VM_DELETE
    !sleep 5
    >
]

?if 1 < 0 ? [
    %BREAK_VM_DELETE
    %BREAK_CINDER_CREATE
    *FAIL
]

; === delete Ubuntu cinder volume
>cinder delete $VOL_NAME
$i=0
$MAX=24
$result=none
# while loop
[ $result != __NO_STRING_CAPTURED__
    +$i
    >cinder list 2>/dev/null | grep $VOL_NAME | awk '{print $6}'
    +$result=\n($VOL_NAME)
    ?if $i > $MAX ? ; === cinder volume $VOL_NAME did not delete
    ?if $i > $MAX ? %BREAK_CINDER_DELETE
    !sleep 5
    >
]
?if 1 < 0 ? [
    %BREAK_CINDER_DELETE
    *FAIL
]

; === end of test

