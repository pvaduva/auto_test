#!/usr/bin/env expect-lite

# How to use this expect-lite file, Lines that begin with:
#	'>' send to remote host, implies "wait for prompt"
#	'<' _MUST_ be received from the remote host, or this config script will fail
#	# are comment lines, and have no effect
#	; are printable (in stdout) comments, and have no other effect
#	@ change the expect timeout value
#	! Embedded Expect commands
# For more info see: expect-lite.html
;;;
#
#	system test monitor running VMs (via NAT box) and has doughnut in the middle
#
#	Automation Assist Script
#
#	Options:
#		vm_mon_number=5			Number of VMs to monitor
#		vm_ip_list=<list of VMs to monitor>
#

;;;

Steps:
1)  Log onto controller
2)  Create test flavor
3)  Look at neutron config
4)  Show images in glance
5)  Get list of active VM management IPs
6)  Log onto controller
7)  Start FS commands on VMs
8)  Execute FS commands
9)  Monitoring vm management ip addresses
10)  Become tenant
11)  --------- Doughnut Hole------------
12)  --------- Doughnut Hole ------------
13)  Check FS commands on VMs
14)  Execute FS commands
15)  Check that FS write command still running
16)  Check that file size has increased
17)  Cleanup
18)  Become Admin, delete flavour




*EXP_INFO
*NOFAIL

# common include path
$inc_path=common/el

# fail script
#*~$inc_path/util/fail_show.inc

$IP=10.10.10.2

$natbox=128.224.150.11

# cgcs credentials
$vm_user=root
$vm_pass=root

$vm_fs_cmd=while (true) do date; dd if=/dev/urandom of=output.txt bs=1k count=1 || break ; echo ; sleep 1; done 2>&1 | tee trace.txt &
$vm_cmd_fs_check=mount | grep 'on / type' | grep 'rw,re'

$vm_mon_number=4

$tenant=tenant11

# vars for launching extra VM
# VM names
$guest1=VM1
$vcpu_size=1
$test_flavor=big
$test_flavor_uuid=5f0d748b-1c8b-4a70-8643-4d57e25ac137
$tenant_credentials=/home/wrsroot/openrc.$tenant
$tenant=$tenant_credentials
# trim to just last part
=$tenant;.*[.](\w+);\1;
$glance_image_name=cgcs-guest





; === log onto controller
~$inc_path/node/ssh_controller.inc


@15
; === create test flavor 
>nova flavor-create $test_flavor $test_flavor_uuid 512 0 $vcpu_size

; === look at neutron config
>neutron net-list
+$internal_net_uuid=([0-9a-f-]{36}) \| internal0
+$tenant1_net_uuid=([0-9a-f-]{36}) \| tenant1-net0
; === show images in glance
>glance image-list
+$glance_image_uuid=([0-9a-f-]{36}) \| $glance_image_name


; === get list of active VM management IPs
>nova list --all-tenants | grep mgmt-net | awk -F"-mgmt-net=" '{print $2}' | awk '{print $1}' |tr -d  ',' |tr -d  ';'| tail -$vm_mon_number |  paste -sd' '
+$vm_ip_list=\n([0-9. ]+)

? $vm_ip_list == __NO_STRING_CAPTURED__ ? *FAIL

*INTERACT


*FORK NATBOX
; === log onto controller
~$inc_path/node/ssh_controller.inc user=cgcs IP=$natbox


#$vm_ip_list=192.168.104.50

; === start FS commands on VMs
[ $vm_ip=$vm_ip_list
	@20
	>ping -c2 $vm_ip
	~$inc_path/node/ssh_controller.inc IP=$vm_ip user=$vm_user pass=$vm_pass
	; === execute FS commands
	>>killall tee
	>>killall tee
	@3
	>$vm_fs_cmd
	>
	>exit
	>
]

# create monitor list
$vm_ip_mon_list=$vm_ip_list
=$vm_ip_mon_list/ /,/

; === monitoring vm management ip addresses
>python tools/monitor.py --addresses $vm_ip_mon_list
*INTERACT



*FORK default
; === Become tenant
>source $tenant_credentials

>date

; === --------- Doughnut Hole------------
*INTERACT


; === --------- Doughnut Hole ------------
>



*FORK NATBOX
@3
; get out of the monitor
!send "Q\r"
>>
>

@10
; === check FS commands on VMs
[ $vm_ip=$vm_ip_list
	>ping -c2 $vm_ip
	~$inc_path/node/ssh_controller.inc IP=$vm_ip user=$vm_user pass=$vm_pass
	; === execute FS commands	
	>$vm_cmd_fs_check
	>$vm_cmd_fs_check | wc -l
	<\n1
	; === check that FS write command still running
	>ls -l trace.txt
	+$fs_size1=root (\d+)
	!sleep 1
	; === check that file size has increased
	>ls -l trace.txt
	-<$fs_size1
	>tail trace.txt
	>>killall tee
	>>killall tee
	
	>
	>exit
	>
]



>
*INTERACT

; === cleanup

; === Become Admin, delete flavour
>source /etc/nova/openrc 
>nova flavor-delete $test_flavor
>
