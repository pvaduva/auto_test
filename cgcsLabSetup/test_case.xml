<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (c) 2013 Wind River Systems, Inc.
        !
        ! The right to copy, distribute, modify or otherwise make use
        ! of this software may be licensed only pursuant to the terms
        ! of an applicable Wind River license agreement.
        
-->
<!--
     Run the DPDK autotest suite app/test.

Modification history
====================
05feb15, ccw  Created
-->

<file>
<environment>
</environment>

<test_module name="sanity/cgcs/cgcsLabSetup" timeout="">
    <test_case  name="sanity/cgcs/cgcsLabSetup" preTest="${WASSP_TESTCASE_BASE}/utils/loginCGCS.frag">
        #######################################################
        # Test Sanity CGCS app/test
        #######################################################
# BUILDSERVER is defined in the spreadsheet
# GUESTPATH is defined in the spreadsheet
# LOADPATH is defined in the spreadsheet



# CALL env
TYPE \n
SINK 1 SEC
PROMPT (.*:~#\s)(.*:~\$)|(.*\]:\s)|(.*\)\]#\s)|(.*\]#\s)|(.*\)\]\$\s)
Con1 PROMPT (.*:~#\s)(.*:~\$)|(.*\]:\s)|(.*\)\]#\s)|(.*\]#\s)|(.*\)\]\$\s)
Con2 PROMPT (.*:~#\s)(.*:~\$)|(.*\]:\s)|(.*\)\]#\s)|(.*\]#\s)|(.*\)\]\$\s)
SET CR }
SET CL {



    TYPE \n
    WAIT 2 SEC {ignoreTimeout:True} login:

    TYPE ${WRSUSER}\n
    WAIT 2 SEC {ignoreTimeout:True} Password:

    TYPE ${WRSPASS}\n
    WAIT 2 SEC {ignoreTimeout:True}


### TODO  change admin password from default

DELAY 1

TYPE export HISTTIMEFORMAT="%Y-%m-%d %T "\n
WAIT 3 SEC {ignoreTimeout:True} 
TYPE export TMOUT=0\n
WAIT 3 SEC {ignoreTimeout:True} 

TYPE echo 'export HISTTIMEFORMAT="%Y-%m-%d %T "' >> ~/.bashrc\n
WAIT 3 SEC {ignoreTimeout:True}

TYPE echo "export TMOUT=0" >> ~/.bashrc\n
WAIT 3 SEC {ignoreTimeout:True} 

TYPE echo 'export PROMPT_COMMAND="date; $$PROMPT_COMMAND"'  >> ~/.bashrc\n
WAIT 3 SEC {ignoreTimeout:True}

TYPE source ~/.bashrc\n
WAIT 3 SEC {ignoreTimeout:True}

TYPE echo ${WRSPASS} | sudo -S sed -i.bkp "s/TMOUT=900/TMOUT=/g" /etc/profile\n
WAIT 3 SEC {ignoreTimeout:True}

TYPE echo ${WRSPASS} | sudo -S chmod -R 755 /var/log\n
WAIT 3 SEC {ignoreTimeout:True}

TYPE source /etc/nova/openrc
TYPE \n

WAIT 1 SEC
SINK 2 SEC

# import users public and private keys
CALL  python3 ${WASSP_TC_PATH}/../utils/sendFile.py -i $env.NODE.target.Boot.oamAddrA -u ${WRSUSER} -p ${WRSPASS} -s ~/.ssh/id_rsa -d ${WRSDIR}/.ssh/ -P 22
CALL  python3 ${WASSP_TC_PATH}/../utils/sendFile.py -i $env.NODE.target.Boot.oamAddrA -u ${WRSUSER} -p ${WRSPASS} -s ~/.ssh/id_rsa.pub -d ${WRSDIR}/.ssh/ -P 22
CALL  python3 ${WASSP_TC_PATH}/../utils/sendFile.py -i $env.NODE.target.Boot.oamAddrA -u ${WRSUSER} -p ${WRSPASS} -s ~/.ssh/authorized_keys -d ${WRSDIR}/.ssh/ -P 22

CALL  python3 ${WASSP_TC_PATH}/../utils/sendFile.py -i $env.NODE.target.Boot.oamAddrB -u ${WRSUSER} -p ${WRSPASS} -s ~/.ssh/id_rsa -d ${WRSDIR}/.ssh/ -P 22
CALL  python3 ${WASSP_TC_PATH}/../utils/sendFile.py -i $env.NODE.target.Boot.oamAddrB -u ${WRSUSER} -p ${WRSPASS} -s ~/.ssh/id_rsa.pub -d ${WRSDIR}/.ssh/ -P 22
CALL  python3 ${WASSP_TC_PATH}/../utils/sendFile.py -i $env.NODE.target.Boot.oamAddrB -u ${WRSUSER} -p ${WRSPASS} -s ~/.ssh/authorized_keys -d ${WRSDIR}/.ssh/ -P 22
SINK 1 SEC

Con1 TYPE mkdir ${WRSDIR}/images ${WRSDIR}/heat ${WRSDIR}/bin\n
Con1 WAIT 10 SEC

# copy some utilities
CALL python3 ${WASSP_TESTCASE_BASE}/utils/sendFile.py -i $env.NODE.target.Boot.oamAddrA -u ${WRSUSER} -p ${WRSPASS} -s ${WASSP_TESTCASE_BASE}/utils/setupCgcsNetworking.sh -d ${WRSDIR}/bin/ -P 22
CALL python3 ${WASSP_TESTCASE_BASE}/utils/sendFile.py -i $env.NODE.target.Boot.oamAddrA -u ${WRSUSER} -p ${WRSPASS} -s ${WASSP_TESTCASE_BASE}/utils/setupCgcsNetworkVars.sh -d ${WRSDIR}/bin/  -P 22
CALL python3 ${WASSP_TESTCASE_BASE}/utils/sendFile.py -i $env.NODE.target.Boot.oamAddrA -u ${WRSUSER} -p ${WRSPASS} -s ${WASSP_TESTCASE_BASE}/utils/system_host_list_wait.sh -d ${WRSDIR}/bin/  -P 22
CALL python3 ${WASSP_TESTCASE_BASE}/utils/sendFile.py -i $env.NODE.target.Boot.oamAddrA -u ${WRSUSER} -p ${WRSPASS} -s ${WASSP_TESTCASE_BASE}/utils/system_host_stor_add.sh -d ${WRSDIR}/bin/  -P 22
CALL python3 ${WASSP_TESTCASE_BASE}/utils/sendFile.py -i $env.NODE.target.Boot.oamAddrA -u ${WRSUSER} -p ${WRSPASS} -s ${WASSP_TESTCASE_BASE}/utils/ceph_health_wait.sh -d ${WRSDIR}/bin/  -P 22
CALL python3 ${WASSP_TESTCASE_BASE}/utils/sendFile.py -i $env.NODE.target.Boot.oamAddrA -u ${WRSUSER} -p ${WRSPASS} -s ${WASSP_TESTCASE_BASE}/utils/create_tempestconf.sh -d ${WRSDIR}/bin/ -P 22
CALL python3 ${WASSP_TESTCASE_BASE}/utils/sendFile.py -i $env.NODE.target.Boot.oamAddrA -u ${WRSUSER} -p ${WRSPASS} -s /folk/${EXECUTOR}/bin/sshpass -d ${WRSDIR}/bin/ -P 22
#CALL python3 ${WASSP_TESTCASE_BASE}/utils/sendFile.py -i $env.NODE.target.Boot.oamAddrA -u ${WRSUSER} -p ${WRSPASS} -s /folk/${EXECUTOR}/bin/sshpass -d /usr/bin/ -P 22



TYPE chmod -R 777 ${WRSDIR}/bin/ \n
WAIT 3 SEC


TYPE nova keypair-add --pub_key ~/.ssh/id_rsa.pub controller-0\n
WAIT 30 SEC
DELAY 5 SEC

LOOKFOR
#LOOKFOR controller-[0-9].*[a-f0-9|/s]+
TYPE nova keypair-list \n
WAIT 30 SEC


LOOKFOR

# LOOKFOR external-net0
# LOOKFOR private-net0
# LOOKFOR public-net0
# LOOKFOR internal-net0
# LOOKFOR

TYPE neutron net-list \n
WAIT 30 SEC
LOOKFOR



TYPE mkdir -p ${WRSDIR}/images/ \n
WAIT 6 SEC
TYPE mkdir -p ${WRSDIR}/heat/ \n
WAIT 6 SEC



SINK 1 SEC
CALL ${WASSP_TC_PATH}/../utils/findLatestCgcsLoad2.sh ${BUILDSERVER} > ${WASSP_TC_RUN_LOG}/cgcs_load.log
CALL cat ${WASSP_TC_RUN_LOG}/cgcs_load.log

SET CR }
SET CL {
CALLPARSER echo $CL\"LOAD_PATH\":\"`cat ${WASSP_TC_RUN_LOG}/cgcs_load.log`\"$CR

#############################################
# Temporary workaroud:
# SET LOAD /localdisk/loadbuild/jenkins/CGTS_1.0_Unified_Daily_Build/2014-01-04_01-32-25/
#############################################
# TODO:  the ssh/rsync user should be  leaned at runtime
# Download the latest Cirros guest VM images to controller-0
# TYPE rsync -av -e 'ssh -o ConnectTimeout=2000 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' ${EXECUTOR}@$BUILDSERVER:/${LOAD_PATH}/layers/wr-cgcs/cgcs/extras.ND/scripts/ ~/images/ \n

TYPE rsync -av -e 'ssh -o ConnectTimeout=2000 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' ${EXECUTOR}@$BUILDSERVER:${JKPATH}${LOADPATH}/latest_build/layers/wr-cgcs/cgcs/extras.ND/scripts/ ${WRSDIR}/images/ \n
WAIT 1000 SEC

# get the ubuntu cloud image.  This image is only available in Scott Little private dir
# hard coding the cgts2 build server IP because the image only exists in scotts directory
TYPE rsync -av -e 'ssh -o ConnectTimeout=2000 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' ${EXECUTOR}@128.224.150.21:/home/svc-cgcsauto/precise-server-cloudimg-amd64-disk1.img ${WRSDIR}/images/precise-server-cloudimg-amd64-disk1.img \n
WAIT 1000 SEC

# Grab 3rd party guest images from: yow-cgts2-lx:/localdisk/designer/jenkins/images/precise-server-cloudimg-amd64-disk1.img
# TYPE rsync -av -e 'ssh -o ConnectTimeout=2000 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' ${EXECUTOR}@$BUILDSERVER:/localdisk/designer/jenkins/images/ ~/images/ \n
# WAIT 1000 SEC

# Copy lab setup config for specific lab - as defined by labsetup variable contained in the target ini file
TYPE rsync -av -e 'ssh -o ConnectTimeout=20 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' ${EXECUTOR}@$BUILDSERVER:${JKPATH}${LOADPATH}/latest_build/layers/wr-cgcs/cgcs/extras.ND/lab/yow/$env.NODE.target.Boot.labsetup/* ${WRSDIR}/ \n
WAIT 20 SEC {ignoreTimeout:True}

TYPE rsync -av -e 'ssh -o ConnectTimeout=20 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' ${EXECUTOR}@$BUILDSERVER:${JKPATH}${LOADPATH}/latest_build/layers/wr-cgcs/cgcs/extras.ND/lab/scripts/* ${WRSDIR}/ \n
WAIT 20 SEC {ignoreTimeout:True}


TYPE rsync -av -e 'ssh -o ConnectTimeout=2000 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' ${EXECUTOR}@$BUILDSERVER:${JKPATH}${GUESTPATH}/cgcs-guest.img ${WRSDIR}/images/  \n
WAIT 30 MIN {ignoreTimeout:True}

# copy the default heat templates
TYPE rsync -av -e 'ssh -o ConnectTimeout=2000 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' ${EXECUTOR}@$BUILDSERVER:${JKPATH}${LOADPATH}/latest_build/bitbake_build/tmp/deploy/cgcs_sdk/* ${WRSDIR}/\n
WAIT 30 MIN

Con1 TYPE rsync -av -e 'ssh -o ConnectTimeout=2000 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' ${EXECUTOR}@$BUILDSERVER:${JKPATH}${LOADPATH}/latest_build/layers/wr-cgcs/cgcs/extras.ND/heat_templates/* ${WRSDIR}/heat/ \n
Con1 WAIT 30 SEC

# Heat template path is hardcoded to Unified Daily Build directory temporarily
Con1 TYPE rsync -av -e 'ssh -o ConnectTimeout=2000 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' ${EXECUTOR}@$BUILDSERVER:${JKPATH}/CGCS_3.0_Unified_Daily_Build/latest_build/export/heat_templates/* ${WRSDIR}/heat/ \n
Con1 WAIT 30 SEC

# Temporary workaroudn to pull in testid.py into nosetest
Con1 TYPE rsync -av -e 'ssh -o ConnectTimeout=2000 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' ${EXECUTOR}@$BUILDSERVER:/folk/cgts/users/${EXECUTOR}/testid.py /usr/lib64/python2.7/site-packages/nose/plugins/ \n
Con1 WAIT 30 SEC


TYPE tar -xvf *heat*.tgz\n
WAIT 30 SEC

TYPE cp -pR wrs-heat*/* heat\n
WAIT 30 SEC




Con2 SINK 3 SEC
# root should have alread loged in via loginCGCS.frag
TYPE chmod -R 777 ${WRSDIR}/images/ \n
WAIT 9 SEC .*
TYPE chmod -R 777 ${WRSDIR}/heat/ \n
WAIT 9 SEC .*




TYPE cat /etc/build.info \n
WAIT 4 SEC {ignoreTimeout:True}





# synch-up  controller-1 to controller-0
TYPE rsync -avr -e 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ' ${WRSDIR}/images controller-1:${WRSDIR}/ \n
WAIT 30 SEC
TYPE rsync -avr -e 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ' ${WRSDIR}/bin controller-1:${WRSDIR}/ \n
WAIT 30 SEC
TYPE rsync -avr -e 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ' ${WRSDIR}/heat controller-1:${WRSDIR}/ \n
WAIT 30 SEC
TYPE rsync -avr -e 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ' ${WRSDIR}/ controller-1:${WRSDIR}/ \n
WAIT 30 SEC

#####################################################################################
# Create VM image and Start it
#####################################################################################
SINK 2 SEC

TYPE glance image-create --name cirros --is-public true --container-format bare --disk-format qcow2 --file ~/images/cirros-0.3.0-x86_64-disk.img --property hw_vif_model=e1000 \n
WAIT 122 SEC
DELAY 5 SEC

LOOKFOR
LOOKFOR
TYPE glance image-list \n
WAIT 122 SEC




TYPE glance image-create --name wrl5-avp --is-public true --container-format bare --disk-format qcow2 --file ~/images/cgcs-guest.img --property hw_vif_model=avp \n
WAIT 30 SEC
DELAY 5 SEC

TYPE glance image-create --name wrl5-virtio --is-public true --container-format bare --disk-format qcow2 --file ~/images/cgcs-guest.img --property hw_vif_model=virtio \n
WAIT 30 SEC
DELAY 5 SEC

# New as of June 12 2014:
TYPE glance image-create --name wrl5 --is-public true --container-format bare --disk-format qcow2 --file ~/images/cgcs-guest.img \n
WAIT 30 SEC
DELAY 5 SEC

# New as of July 22 2014:
TYPE glance image-create --name ubuntu-precise-amd64 --is-public true --container-format bare --disk-format qcow2 --file ~/images/precise-server-cloudimg-amd64-disk1.img \n
WAIT 300 SEC

# for backwrard compatibility:
# TYPE glance image-create --name cgcs-guest --is-public true --container-format bare --disk-format raw --file ~/images/cgcs-guest.img \n
# WAIT 30 SEC

TYPE nova flavor-create wrl5.dpdk.big 100 4096 0 3\n
WAIT 30 SEC

TYPE nova flavor-create wrl5.dpdk.small 101 512 0 2\n
WAIT 30 SEC

TYPE nova flavor-create --dedicated-cpus True m1.small 2 2048 20 1\n
WAIT 30 SEC

TYPE nova flavor-create --dedicated-cpus True --guest-heartbeat True  wrl5.dpdk.small.heartbeat 200 512 0 2\n
WAIT 30 SEC

TYPE nova flavor-create --dedicated-cpus True --guest-heartbeat True  wrl5.dpdk.big.heartbeat 201 4096 0 3\n
WAIT 30 SEC

TYPE nova flavor-create --dedicated-cpus True --guest-heartbeat True  --shared-vcpu 0  wrl5.dpdk.big.heartbeat.pinToMgmtCore  233 4096 0 3\n
WAIT 30 SEC

TYPE nova flavor-create --dedicated-cpus True m1.tiny 1 512 1 1\n
WAIT 99 SEC


####  New way to create flavors in R2
####  commands above will fail silently in R2 but will be backwards compatible with R1
TYPE nova flavor-create m1.small 2 2048 20 1\n
WAIT 30 SEC
TYPE nova flavor-key m1.small set hw:cpu_policy=dedicated hw:mem_page_size=2048\n
WAIT 30 SEC

TYPE nova flavor-create  wrl5.dpdk.small.heartbeat 200 512 0 2\n
WAIT 30 SEC
TYPE nova flavor-key wrl5.dpdk.small.heartbeat set hw:cpu_policy=dedicated hw:mem_page_size=2048\n
WAIT 30 SEC

TYPE nova flavor-create  wrl5.dpdk.big.heartbeat 201 4096 0 3\n
WAIT 30 SEC
TYPE nova flavor-key wrl5.dpdk.big.heartbeat set hw:cpu_policy=dedicated hw:mem_page_size=2048\n
WAIT 30 SEC

TYPE nova flavor-create  wrl5.dpdk.big.heartbeat.pinToMgmtCore  233 4096 0 3\n
WAIT 30 SEC
TYPE nova flavor-key wrl5.dpdk.big.heartbeat.pinToMgmtCore set hw:cpu_policy=dedicated hw:mem_page_size=2048\n
WAIT 30 SEC

TYPE nova flavor-create  m1.tiny 1 512 1 1\n
WAIT 30 SEC
TYPE nova flavor-key m1.tiny set hw:cpu_policy=dedicated hw:mem_page_size=2048\n
WAIT 30 SEC

TYPE nova flavor-key wrl5.dpdk.small set hw:cpu_policy=dedicated hw:mem_page_size=2048\n
WAIT 30 SEC

TYPE nova flavor-key wrl5.dpdk.big set hw:cpu_policy=dedicated hw:mem_page_size=2048\n
WAIT 30 SEC

###


#### Create tempest.conf file
# TODO: this file needs to be lab specifica based on info in the controller-0 target.in for a particularlab
# It should contain designated VLANids as per: http://twiki.wrs.com/PBUeng/CGTelcoServerLabConn

CALL  python3 ${WASSP_TC_PATH}/../utils/sendFile.py -i $env.NODE.target.Boot.oamAddrA -u ${WRSUSER} -p ${WRSPASS} -s ${WASSP_TC_PATH}/../utils/create_tempestconf.sh -d ${WRSDIR}/bin/ -P 22

TYPE ~/bin/create_tempestconf.sh $env.NODE.target.Boot.NATIP $env.NODE.target.Boot.NATUSER $env.NODE.target.Boot.NATPASS $env.NODE.target.Boot.computeA $env.NODE.target.Boot.computeB $env.NODE.target.Boot.controllerA $env.NODE.target.Boot.controllerB ${PUBLIC_NETWORK} ${PUBLIC_ROUTER} admin ${WRSPASS} \n
WAIT 60 SEC
TYPE cat ~/bin/create_tempestconf.sh \n
WAIT 60 SEC



TYPE echo set tabstop=4 > ~/.vimrc\n
TYPE echo set ignorecase >> ~/.vimrc\n
TYPE echo syntax on >> ~/.vimrc\n
TYPE echo set hlsearch >> ~/.vimrc\n
TYPE echo set shiftwidth=4 >> ~/.vimrc\n
TYPE echo set expandtab >> ~/.vimrc\n
TYPE echo set mouse-=a >> ~/.vimrc\n
WAIT 10 SEC {ignoreTimeout:True}


TYPE system modify name=$env.NODE.target.Boot.labsetup\n
TYPE system modify description="This system belongs to CGCS project"\n
WAIT 10 SEC {ignoreTimeout:True}


TYPE nova list \n
WAIT 10 SEC
SAVEOUTPUT /tmp/nova-list.log
# SAVEOUTPUT ${WASSP_TC_USER_WORKSPACE}/myFile


## CALLPARSER echo $CL\"LOAD_PATH\":\"`cat ${WASSP_TC_PATH}/cgcs_load.log`\"$CR
## {"LOAD_PATH":"/localdisk/loadbuild/jenkins/CGTS_1.0_Unified_Daily_Build/2014-01-04_01-32-25/"}
## CALL cat /tmp/nova-list.log|grep cirros-1 | awk 'BEGIN {FS = "=||\;" } {print $2}' > /tmp/cirrosip.txt

CALL cat /tmp/nova-list.log|grep cirros-1 | awk 'BEGIN ${CL} FS = "=||;"${CR} ${CL} print $$2${CR}' > /tmp/cirrosip.txt
CALLPARSER echo ${CL}\"CIRROS0IP\":\"`cat /tmp/cirrosip.txt`\"${CR}

# CALL ssh cgcs@128.224.150.11 ping -c1 192.168.101.2


TYPE chown -R wrsroot.wrs /home/wrsroot/ \n
WAIT 30 SEC

        PASS
    </test_case>
</test_module>
</file>
